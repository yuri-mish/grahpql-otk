{"version":3,"sources":["../../../node_modules/detect-indent/index.js"],"names":["repeating","require","INDENT_RE","getMostUsed","indents","result","maxUsed","maxWeight","n","indent","u","w","Number","module","exports","str","TypeError","tabs","spaces","prev","current","isIndent","split","forEach","line","matches","match","length","diff","amount","type","actual"],"mappings":"AAAA;AACA;;AACA,IAAIA,YAAYC,QAAQ,WAAR,CAAhB;;AAEA;AACA;AACA,IAAIC,YAAY,eAAhB;;AAEA,SAASC,WAAT,CAAqBC,OAArB,EAA8B;AAC7B,KAAIC,SAAS,CAAb;AACA,KAAIC,UAAU,CAAd;AACA,KAAIC,YAAY,CAAhB;;AAEA,MAAK,IAAIC,CAAT,IAAcJ,OAAd,EAAuB;AACtB,MAAIK,SAASL,QAAQI,CAAR,CAAb;AACA,MAAIE,IAAID,OAAO,CAAP,CAAR;AACA,MAAIE,IAAIF,OAAO,CAAP,CAAR;;AAEA,MAAIC,IAAIJ,OAAJ,IAAeI,MAAMJ,OAAN,IAAiBK,IAAIJ,SAAxC,EAAmD;AAClDD,aAAUI,CAAV;AACAH,eAAYI,CAAZ;AACAN,YAASO,OAAOJ,CAAP,CAAT;AACA;AACD;;AAED,QAAOH,MAAP;AACA;;AAEDQ,OAAOC,OAAP,GAAiB,UAAUC,GAAV,EAAe;AAC/B,KAAI,OAAOA,GAAP,KAAe,QAAnB,EAA6B;AAC5B,QAAM,IAAIC,SAAJ,CAAc,mBAAd,CAAN;AACA;;AAED;AACA,KAAIC,OAAO,CAAX;AACA,KAAIC,SAAS,CAAb;;AAEA;AACA,KAAIC,OAAO,CAAX;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAIf,UAAU,EAAd;;AAEA;AACA,KAAIgB,OAAJ;;AAEA;AACA,KAAIC,QAAJ;;AAEAN,KAAIO,KAAJ,CAAU,KAAV,EAAiBC,OAAjB,CAAyB,UAAUC,IAAV,EAAgB;AACxC,MAAI,CAACA,IAAL,EAAW;AACV;AACA;AACA;;AAED,MAAIf,MAAJ;AACA,MAAIgB,UAAUD,KAAKE,KAAL,CAAWxB,SAAX,CAAd;;AAEA,MAAI,CAACuB,OAAL,EAAc;AACbhB,YAAS,CAAT;AACA,GAFD,MAEO;AACNA,YAASgB,QAAQ,CAAR,EAAWE,MAApB;;AAEA,OAAIF,QAAQ,CAAR,CAAJ,EAAgB;AACfP;AACA,IAFD,MAEO;AACND;AACA;AACD;;AAED,MAAIW,OAAOnB,SAASU,IAApB;AACAA,SAAOV,MAAP;;AAEA,MAAImB,IAAJ,EAAU;AACT;;AAEAP,cAAWO,OAAO,CAAlB;;AAEAR,aAAUhB,QAAQiB,WAAWO,IAAX,GAAkB,CAACA,IAA3B,CAAV;;AAEA,OAAIR,OAAJ,EAAa;AACZA,YAAQ,CAAR;AACA,IAFD,MAEO;AACNA,cAAUhB,QAAQwB,IAAR,IAAgB,CAAC,CAAD,EAAI,CAAJ,CAA1B;AACA;AACD,GAZD,MAYO,IAAIR,OAAJ,EAAa;AACnB;AACAA,WAAQ,CAAR,KAAcR,OAAOS,QAAP,CAAd;AACA;AACD,EAxCD;;AA0CA,KAAIQ,SAAS1B,YAAYC,OAAZ,CAAb;;AAEA,KAAI0B,IAAJ;AACA,KAAIC,MAAJ;AACA,KAAI,CAACF,MAAL,EAAa;AACZC,SAAO,IAAP;AACAC,WAAS,EAAT;AACA,EAHD,MAGO,IAAIb,UAAUD,IAAd,EAAoB;AAC1Ba,SAAO,OAAP;AACAC,WAAS/B,UAAU,GAAV,EAAe6B,MAAf,CAAT;AACA,EAHM,MAGA;AACNC,SAAO,KAAP;AACAC,WAAS/B,UAAU,IAAV,EAAgB6B,MAAhB,CAAT;AACA;;AAED,QAAO;AACNA,UAAQA,MADF;AAENC,QAAMA,IAFA;AAGNrB,UAAQsB;AAHF,EAAP;AAKA,CA3FD","file":"index.js","sourcesContent":["/* eslint-disable guard-for-in */\n'use strict';\nvar repeating = require('repeating');\n\n// detect either spaces or tabs but not both to properly handle tabs\n// for indentation and spaces for alignment\nvar INDENT_RE = /^(?:( )+|\\t+)/;\n\nfunction getMostUsed(indents) {\n\tvar result = 0;\n\tvar maxUsed = 0;\n\tvar maxWeight = 0;\n\n\tfor (var n in indents) {\n\t\tvar indent = indents[n];\n\t\tvar u = indent[0];\n\t\tvar w = indent[1];\n\n\t\tif (u > maxUsed || u === maxUsed && w > maxWeight) {\n\t\t\tmaxUsed = u;\n\t\t\tmaxWeight = w;\n\t\t\tresult = Number(n);\n\t\t}\n\t}\n\n\treturn result;\n}\n\nmodule.exports = function (str) {\n\tif (typeof str !== 'string') {\n\t\tthrow new TypeError('Expected a string');\n\t}\n\n\t// used to see if tabs or spaces are the most used\n\tvar tabs = 0;\n\tvar spaces = 0;\n\n\t// remember the size of previous line's indentation\n\tvar prev = 0;\n\n\t// remember how many indents/unindents as occurred for a given size\n\t// and how much lines follow a given indentation\n\t//\n\t// indents = {\n\t//    3: [1, 0],\n\t//    4: [1, 5],\n\t//    5: [1, 0],\n\t//   12: [1, 0],\n\t// }\n\tvar indents = {};\n\n\t// pointer to the array of last used indent\n\tvar current;\n\n\t// whether the last action was an indent (opposed to an unindent)\n\tvar isIndent;\n\n\tstr.split(/\\n/g).forEach(function (line) {\n\t\tif (!line) {\n\t\t\t// ignore empty lines\n\t\t\treturn;\n\t\t}\n\n\t\tvar indent;\n\t\tvar matches = line.match(INDENT_RE);\n\n\t\tif (!matches) {\n\t\t\tindent = 0;\n\t\t} else {\n\t\t\tindent = matches[0].length;\n\n\t\t\tif (matches[1]) {\n\t\t\t\tspaces++;\n\t\t\t} else {\n\t\t\t\ttabs++;\n\t\t\t}\n\t\t}\n\n\t\tvar diff = indent - prev;\n\t\tprev = indent;\n\n\t\tif (diff) {\n\t\t\t// an indent or unindent has been detected\n\n\t\t\tisIndent = diff > 0;\n\n\t\t\tcurrent = indents[isIndent ? diff : -diff];\n\n\t\t\tif (current) {\n\t\t\t\tcurrent[0]++;\n\t\t\t} else {\n\t\t\t\tcurrent = indents[diff] = [1, 0];\n\t\t\t}\n\t\t} else if (current) {\n\t\t\t// if the last action was an indent, increment the weight\n\t\t\tcurrent[1] += Number(isIndent);\n\t\t}\n\t});\n\n\tvar amount = getMostUsed(indents);\n\n\tvar type;\n\tvar actual;\n\tif (!amount) {\n\t\ttype = null;\n\t\tactual = '';\n\t} else if (spaces >= tabs) {\n\t\ttype = 'space';\n\t\tactual = repeating(' ', amount);\n\t} else {\n\t\ttype = 'tab';\n\t\tactual = repeating('\\t', amount);\n\t}\n\n\treturn {\n\t\tamount: amount,\n\t\ttype: type,\n\t\tindent: actual\n\t};\n};\n"]}