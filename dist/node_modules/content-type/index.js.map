{"version":3,"sources":["../../../node_modules/content-type/index.js"],"names":["PARAM_REGEXP","TEXT_REGEXP","TOKEN_REGEXP","QESC_REGEXP","QUOTE_REGEXP","TYPE_REGEXP","exports","format","parse","obj","TypeError","parameters","type","test","string","param","params","Object","keys","sort","i","length","qstring","header","getcontenttype","index","indexOf","substr","trim","ContentType","toLowerCase","key","match","value","lastIndex","exec","replace","getHeader","headers","val","str","String","create"],"mappings":"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","file":"index.js","sourcesContent":["/*!\n * content-type\n * Copyright(c) 2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * RegExp to match *( \";\" parameter ) in RFC 7231 sec 3.1.1.1\n *\n * parameter     = token \"=\" ( token / quoted-string )\n * token         = 1*tchar\n * tchar         = \"!\" / \"#\" / \"$\" / \"%\" / \"&\" / \"'\" / \"*\"\n *               / \"+\" / \"-\" / \".\" / \"^\" / \"_\" / \"`\" / \"|\" / \"~\"\n *               / DIGIT / ALPHA\n *               ; any VCHAR, except delimiters\n * quoted-string = DQUOTE *( qdtext / quoted-pair ) DQUOTE\n * qdtext        = HTAB / SP / %x21 / %x23-5B / %x5D-7E / obs-text\n * obs-text      = %x80-FF\n * quoted-pair   = \"\\\" ( HTAB / SP / VCHAR / obs-text )\n */\nvar PARAM_REGEXP = /; *([!#$%&'*+.^_`|~0-9A-Za-z-]+) *= *(\"(?:[\\u000b\\u0020\\u0021\\u0023-\\u005b\\u005d-\\u007e\\u0080-\\u00ff]|\\\\[\\u000b\\u0020-\\u00ff])*\"|[!#$%&'*+.^_`|~0-9A-Za-z-]+) */g\nvar TEXT_REGEXP = /^[\\u000b\\u0020-\\u007e\\u0080-\\u00ff]+$/\nvar TOKEN_REGEXP = /^[!#$%&'*+.^_`|~0-9A-Za-z-]+$/\n\n/**\n * RegExp to match quoted-pair in RFC 7230 sec 3.2.6\n *\n * quoted-pair = \"\\\" ( HTAB / SP / VCHAR / obs-text )\n * obs-text    = %x80-FF\n */\nvar QESC_REGEXP = /\\\\([\\u000b\\u0020-\\u00ff])/g\n\n/**\n * RegExp to match chars that must be quoted-pair in RFC 7230 sec 3.2.6\n */\nvar QUOTE_REGEXP = /([\\\\\"])/g\n\n/**\n * RegExp to match type in RFC 7231 sec 3.1.1.1\n *\n * media-type = type \"/\" subtype\n * type       = token\n * subtype    = token\n */\nvar TYPE_REGEXP = /^[!#$%&'*+.^_`|~0-9A-Za-z-]+\\/[!#$%&'*+.^_`|~0-9A-Za-z-]+$/\n\n/**\n * Module exports.\n * @public\n */\n\nexports.format = format\nexports.parse = parse\n\n/**\n * Format object to media type.\n *\n * @param {object} obj\n * @return {string}\n * @public\n */\n\nfunction format (obj) {\n  if (!obj || typeof obj !== 'object') {\n    throw new TypeError('argument obj is required')\n  }\n\n  var parameters = obj.parameters\n  var type = obj.type\n\n  if (!type || !TYPE_REGEXP.test(type)) {\n    throw new TypeError('invalid type')\n  }\n\n  var string = type\n\n  // append parameters\n  if (parameters && typeof parameters === 'object') {\n    var param\n    var params = Object.keys(parameters).sort()\n\n    for (var i = 0; i < params.length; i++) {\n      param = params[i]\n\n      if (!TOKEN_REGEXP.test(param)) {\n        throw new TypeError('invalid parameter name')\n      }\n\n      string += '; ' + param + '=' + qstring(parameters[param])\n    }\n  }\n\n  return string\n}\n\n/**\n * Parse media type to object.\n *\n * @param {string|object} string\n * @return {Object}\n * @public\n */\n\nfunction parse (string) {\n  if (!string) {\n    throw new TypeError('argument string is required')\n  }\n\n  // support req/res-like objects as argument\n  var header = typeof string === 'object'\n    ? getcontenttype(string)\n    : string\n\n  if (typeof header !== 'string') {\n    throw new TypeError('argument string is required to be a string')\n  }\n\n  var index = header.indexOf(';')\n  var type = index !== -1\n    ? header.substr(0, index).trim()\n    : header.trim()\n\n  if (!TYPE_REGEXP.test(type)) {\n    throw new TypeError('invalid media type')\n  }\n\n  var obj = new ContentType(type.toLowerCase())\n\n  // parse parameters\n  if (index !== -1) {\n    var key\n    var match\n    var value\n\n    PARAM_REGEXP.lastIndex = index\n\n    while ((match = PARAM_REGEXP.exec(header))) {\n      if (match.index !== index) {\n        throw new TypeError('invalid parameter format')\n      }\n\n      index += match[0].length\n      key = match[1].toLowerCase()\n      value = match[2]\n\n      if (value[0] === '\"') {\n        // remove quotes and escapes\n        value = value\n          .substr(1, value.length - 2)\n          .replace(QESC_REGEXP, '$1')\n      }\n\n      obj.parameters[key] = value\n    }\n\n    if (index !== header.length) {\n      throw new TypeError('invalid parameter format')\n    }\n  }\n\n  return obj\n}\n\n/**\n * Get content-type from req/res objects.\n *\n * @param {object}\n * @return {Object}\n * @private\n */\n\nfunction getcontenttype (obj) {\n  var header\n\n  if (typeof obj.getHeader === 'function') {\n    // res-like\n    header = obj.getHeader('content-type')\n  } else if (typeof obj.headers === 'object') {\n    // req-like\n    header = obj.headers && obj.headers['content-type']\n  }\n\n  if (typeof header !== 'string') {\n    throw new TypeError('content-type header is missing from object')\n  }\n\n  return header\n}\n\n/**\n * Quote a string if necessary.\n *\n * @param {string} val\n * @return {string}\n * @private\n */\n\nfunction qstring (val) {\n  var str = String(val)\n\n  // no need to quote tokens\n  if (TOKEN_REGEXP.test(str)) {\n    return str\n  }\n\n  if (str.length > 0 && !TEXT_REGEXP.test(str)) {\n    throw new TypeError('invalid parameter value')\n  }\n\n  return '\"' + str.replace(QUOTE_REGEXP, '\\\\$1') + '\"'\n}\n\n/**\n * Class to represent a content type.\n * @private\n */\nfunction ContentType (type) {\n  this.parameters = Object.create(null)\n  this.type = type\n}\n"]}