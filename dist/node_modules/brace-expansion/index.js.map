{"version":3,"sources":["../../../node_modules/brace-expansion/index.js"],"names":["concatMap","require","balanced","module","exports","expandTop","escSlash","Math","random","escOpen","escClose","escComma","escPeriod","numeric","str","parseInt","charCodeAt","escapeBraces","split","join","unescapeBraces","parseCommaParts","parts","m","pre","body","post","p","length","postParts","shift","push","apply","substr","expand","map","identity","e","embrace","isPadded","el","test","lte","i","y","gte","isTop","expansions","isNumericSequence","isAlphaSequence","isSequence","isOptions","indexOf","match","n","N","x","width","max","incr","abs","reverse","pad","some","c","String","fromCharCode","need","z","Array","slice","j","k","expansion"],"mappings":"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","file":"index.js","sourcesContent":["var concatMap = require('concat-map');\nvar balanced = require('balanced-match');\n\nmodule.exports = expandTop;\n\nvar escSlash = '\\0SLASH'+Math.random()+'\\0';\nvar escOpen = '\\0OPEN'+Math.random()+'\\0';\nvar escClose = '\\0CLOSE'+Math.random()+'\\0';\nvar escComma = '\\0COMMA'+Math.random()+'\\0';\nvar escPeriod = '\\0PERIOD'+Math.random()+'\\0';\n\nfunction numeric(str) {\n  return parseInt(str, 10) == str\n    ? parseInt(str, 10)\n    : str.charCodeAt(0);\n}\n\nfunction escapeBraces(str) {\n  return str.split('\\\\\\\\').join(escSlash)\n            .split('\\\\{').join(escOpen)\n            .split('\\\\}').join(escClose)\n            .split('\\\\,').join(escComma)\n            .split('\\\\.').join(escPeriod);\n}\n\nfunction unescapeBraces(str) {\n  return str.split(escSlash).join('\\\\')\n            .split(escOpen).join('{')\n            .split(escClose).join('}')\n            .split(escComma).join(',')\n            .split(escPeriod).join('.');\n}\n\n\n// Basically just str.split(\",\"), but handling cases\n// where we have nested braced sections, which should be\n// treated as individual members, like {a,{b,c},d}\nfunction parseCommaParts(str) {\n  if (!str)\n    return [''];\n\n  var parts = [];\n  var m = balanced('{', '}', str);\n\n  if (!m)\n    return str.split(',');\n\n  var pre = m.pre;\n  var body = m.body;\n  var post = m.post;\n  var p = pre.split(',');\n\n  p[p.length-1] += '{' + body + '}';\n  var postParts = parseCommaParts(post);\n  if (post.length) {\n    p[p.length-1] += postParts.shift();\n    p.push.apply(p, postParts);\n  }\n\n  parts.push.apply(parts, p);\n\n  return parts;\n}\n\nfunction expandTop(str) {\n  if (!str)\n    return [];\n\n  // I don't know why Bash 4.3 does this, but it does.\n  // Anything starting with {} will have the first two bytes preserved\n  // but *only* at the top level, so {},a}b will not expand to anything,\n  // but a{},b}c will be expanded to [a}c,abc].\n  // One could argue that this is a bug in Bash, but since the goal of\n  // this module is to match Bash's rules, we escape a leading {}\n  if (str.substr(0, 2) === '{}') {\n    str = '\\\\{\\\\}' + str.substr(2);\n  }\n\n  return expand(escapeBraces(str), true).map(unescapeBraces);\n}\n\nfunction identity(e) {\n  return e;\n}\n\nfunction embrace(str) {\n  return '{' + str + '}';\n}\nfunction isPadded(el) {\n  return /^-?0\\d/.test(el);\n}\n\nfunction lte(i, y) {\n  return i <= y;\n}\nfunction gte(i, y) {\n  return i >= y;\n}\n\nfunction expand(str, isTop) {\n  var expansions = [];\n\n  var m = balanced('{', '}', str);\n  if (!m || /\\$$/.test(m.pre)) return [str];\n\n  var isNumericSequence = /^-?\\d+\\.\\.-?\\d+(?:\\.\\.-?\\d+)?$/.test(m.body);\n  var isAlphaSequence = /^[a-zA-Z]\\.\\.[a-zA-Z](?:\\.\\.-?\\d+)?$/.test(m.body);\n  var isSequence = isNumericSequence || isAlphaSequence;\n  var isOptions = m.body.indexOf(',') >= 0;\n  if (!isSequence && !isOptions) {\n    // {a},b}\n    if (m.post.match(/,.*\\}/)) {\n      str = m.pre + '{' + m.body + escClose + m.post;\n      return expand(str);\n    }\n    return [str];\n  }\n\n  var n;\n  if (isSequence) {\n    n = m.body.split(/\\.\\./);\n  } else {\n    n = parseCommaParts(m.body);\n    if (n.length === 1) {\n      // x{{a,b}}y ==> x{a}y x{b}y\n      n = expand(n[0], false).map(embrace);\n      if (n.length === 1) {\n        var post = m.post.length\n          ? expand(m.post, false)\n          : [''];\n        return post.map(function(p) {\n          return m.pre + n[0] + p;\n        });\n      }\n    }\n  }\n\n  // at this point, n is the parts, and we know it's not a comma set\n  // with a single entry.\n\n  // no need to expand pre, since it is guaranteed to be free of brace-sets\n  var pre = m.pre;\n  var post = m.post.length\n    ? expand(m.post, false)\n    : [''];\n\n  var N;\n\n  if (isSequence) {\n    var x = numeric(n[0]);\n    var y = numeric(n[1]);\n    var width = Math.max(n[0].length, n[1].length)\n    var incr = n.length == 3\n      ? Math.abs(numeric(n[2]))\n      : 1;\n    var test = lte;\n    var reverse = y < x;\n    if (reverse) {\n      incr *= -1;\n      test = gte;\n    }\n    var pad = n.some(isPadded);\n\n    N = [];\n\n    for (var i = x; test(i, y); i += incr) {\n      var c;\n      if (isAlphaSequence) {\n        c = String.fromCharCode(i);\n        if (c === '\\\\')\n          c = '';\n      } else {\n        c = String(i);\n        if (pad) {\n          var need = width - c.length;\n          if (need > 0) {\n            var z = new Array(need + 1).join('0');\n            if (i < 0)\n              c = '-' + z + c.slice(1);\n            else\n              c = z + c;\n          }\n        }\n      }\n      N.push(c);\n    }\n  } else {\n    N = concatMap(n, function(el) { return expand(el, false) });\n  }\n\n  for (var j = 0; j < N.length; j++) {\n    for (var k = 0; k < post.length; k++) {\n      var expansion = pre + N[j] + post[k];\n      if (!isTop || isSequence || expansion)\n        expansions.push(expansion);\n    }\n  }\n\n  return expansions;\n}\n\n"]}