{"version":3,"sources":["../../../node_modules/expand-brackets/index.js"],"names":["isPosixBracket","require","POSIX","alnum","alpha","blank","cntrl","digit","graph","lower","print","punct","space","upper","word","xdigit","module","exports","brackets","str","negated","indexOf","split","join","a","b","imbalanced","length","parts","len","i","end","beg","res","inner","prefix","ch","push","test","result","rlen","charAt","slice","replace","makeRe","pattern","RegExp","err","isMatch","match","arr","re","ele","splice"],"mappings":"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","file":"index.js","sourcesContent":["/*!\n * expand-brackets <https://github.com/jonschlinkert/expand-brackets>\n *\n * Copyright (c) 2015 Jon Schlinkert.\n * Licensed under the MIT license.\n */\n\n'use strict';\n\nvar isPosixBracket = require('is-posix-bracket');\n\n/**\n * POSIX character classes\n */\n\nvar POSIX = {\n  alnum: 'a-zA-Z0-9',\n  alpha: 'a-zA-Z',\n  blank: ' \\\\t',\n  cntrl: '\\\\x00-\\\\x1F\\\\x7F',\n  digit: '0-9',\n  graph: '\\\\x21-\\\\x7E',\n  lower: 'a-z',\n  print: '\\\\x20-\\\\x7E',\n  punct: '-!\"#$%&\\'()\\\\*+,./:;<=>?@[\\\\]^_`{|}~',\n  space: ' \\\\t\\\\r\\\\n\\\\v\\\\f',\n  upper: 'A-Z',\n  word:  'A-Za-z0-9_',\n  xdigit: 'A-Fa-f0-9',\n};\n\n/**\n * Expose `brackets`\n */\n\nmodule.exports = brackets;\n\nfunction brackets(str) {\n  if (!isPosixBracket(str)) {\n    return str;\n  }\n\n  var negated = false;\n  if (str.indexOf('[^') !== -1) {\n    negated = true;\n    str = str.split('[^').join('[');\n  }\n  if (str.indexOf('[!') !== -1) {\n    negated = true;\n    str = str.split('[!').join('[');\n  }\n\n  var a = str.split('[');\n  var b = str.split(']');\n  var imbalanced = a.length !== b.length;\n\n  var parts = str.split(/(?::\\]\\[:|\\[?\\[:|:\\]\\]?)/);\n  var len = parts.length, i = 0;\n  var end = '', beg = '';\n  var res = [];\n\n  // start at the end (innermost) first\n  while (len--) {\n    var inner = parts[i++];\n    if (inner === '^[!' || inner === '[!') {\n      inner = '';\n      negated = true;\n    }\n\n    var prefix = negated ? '^' : '';\n    var ch = POSIX[inner];\n\n    if (ch) {\n      res.push('[' + prefix + ch + ']');\n    } else if (inner) {\n      if (/^\\[?\\w-\\w\\]?$/.test(inner)) {\n        if (i === parts.length) {\n          res.push('[' + prefix + inner);\n        } else if (i === 1) {\n          res.push(prefix + inner + ']');\n        } else {\n          res.push(prefix + inner);\n        }\n      } else {\n        if (i === 1) {\n          beg += inner;\n        } else if (i === parts.length) {\n          end += inner;\n        } else {\n          res.push('[' + prefix + inner + ']');\n        }\n      }\n    }\n  }\n\n  var result = res.join('|');\n  var rlen = res.length || 1;\n  if (rlen > 1) {\n    result = '(?:' + result + ')';\n    rlen = 1;\n  }\n  if (beg) {\n    rlen++;\n    if (beg.charAt(0) === '[') {\n      if (imbalanced) {\n        beg = '\\\\[' + beg.slice(1);\n      } else {\n        beg += ']';\n      }\n    }\n    result = beg + result;\n  }\n  if (end) {\n    rlen++;\n    if (end.slice(-1) === ']') {\n      if (imbalanced) {\n        end = end.slice(0, end.length - 1) + '\\\\]';\n      } else {\n        end = '[' + end;\n      }\n    }\n    result += end;\n  }\n\n  if (rlen > 1) {\n    result = result.split('][').join(']|[');\n    if (result.indexOf('|') !== -1 && !/\\(\\?/.test(result)) {\n      result = '(?:' + result + ')';\n    }\n  }\n\n  result = result.replace(/\\[+=|=\\]+/g, '\\\\b');\n  return result;\n}\n\nbrackets.makeRe = function(pattern) {\n  try {\n    return new RegExp(brackets(pattern));\n  } catch (err) {}\n};\n\nbrackets.isMatch = function(str, pattern) {\n  try {\n    return brackets.makeRe(pattern).test(str);\n  } catch (err) {\n    return false;\n  }\n};\n\nbrackets.match = function(arr, pattern) {\n  var len = arr.length, i = 0;\n  var res = arr.slice();\n\n  var re = brackets.makeRe(pattern);\n  while (i < len) {\n    var ele = arr[i++];\n    if (!re.test(ele)) {\n      continue;\n    }\n    res.splice(i, 1);\n  }\n  return res;\n};\n"]}