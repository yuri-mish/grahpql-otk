{"version":3,"sources":["../../../node_modules/array-flatten/array-flatten.js"],"names":["module","exports","arrayFlatten","flattenWithDepth","array","result","depth","i","length","value","Array","isArray","push","flattenForever"],"mappings":"AAAA;;AAEA;;;;AAGAA,OAAOC,OAAP,GAAiBC,YAAjB;;AAEA;;;;;;;;AAQA,SAASC,gBAAT,CAA2BC,KAA3B,EAAkCC,MAAlC,EAA0CC,KAA1C,EAAiD;AAC/C,OAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIH,MAAMI,MAA1B,EAAkCD,GAAlC,EAAuC;AACrC,QAAIE,QAAQL,MAAMG,CAAN,CAAZ;;AAEA,QAAID,QAAQ,CAAR,IAAaI,MAAMC,OAAN,CAAcF,KAAd,CAAjB,EAAuC;AACrCN,uBAAiBM,KAAjB,EAAwBJ,MAAxB,EAAgCC,QAAQ,CAAxC;AACD,KAFD,MAEO;AACLD,aAAOO,IAAP,CAAYH,KAAZ;AACD;AACF;;AAED,SAAOJ,MAAP;AACD;;AAED;;;;;;;AAOA,SAASQ,cAAT,CAAyBT,KAAzB,EAAgCC,MAAhC,EAAwC;AACtC,OAAK,IAAIE,IAAI,CAAb,EAAgBA,IAAIH,MAAMI,MAA1B,EAAkCD,GAAlC,EAAuC;AACrC,QAAIE,QAAQL,MAAMG,CAAN,CAAZ;;AAEA,QAAIG,MAAMC,OAAN,CAAcF,KAAd,CAAJ,EAA0B;AACxBI,qBAAeJ,KAAf,EAAsBJ,MAAtB;AACD,KAFD,MAEO;AACLA,aAAOO,IAAP,CAAYH,KAAZ;AACD;AACF;;AAED,SAAOJ,MAAP;AACD;;AAED;;;;;;;AAOA,SAASH,YAAT,CAAuBE,KAAvB,EAA8BE,KAA9B,EAAqC;AACnC,MAAIA,SAAS,IAAb,EAAmB;AACjB,WAAOO,eAAeT,KAAf,EAAsB,EAAtB,CAAP;AACD;;AAED,SAAOD,iBAAiBC,KAAjB,EAAwB,EAAxB,EAA4BE,KAA5B,CAAP;AACD","file":"array-flatten.js","sourcesContent":["'use strict'\n\n/**\n * Expose `arrayFlatten`.\n */\nmodule.exports = arrayFlatten\n\n/**\n * Recursive flatten function with depth.\n *\n * @param  {Array}  array\n * @param  {Array}  result\n * @param  {Number} depth\n * @return {Array}\n */\nfunction flattenWithDepth (array, result, depth) {\n  for (var i = 0; i < array.length; i++) {\n    var value = array[i]\n\n    if (depth > 0 && Array.isArray(value)) {\n      flattenWithDepth(value, result, depth - 1)\n    } else {\n      result.push(value)\n    }\n  }\n\n  return result\n}\n\n/**\n * Recursive flatten function. Omitting depth is slightly faster.\n *\n * @param  {Array} array\n * @param  {Array} result\n * @return {Array}\n */\nfunction flattenForever (array, result) {\n  for (var i = 0; i < array.length; i++) {\n    var value = array[i]\n\n    if (Array.isArray(value)) {\n      flattenForever(value, result)\n    } else {\n      result.push(value)\n    }\n  }\n\n  return result\n}\n\n/**\n * Flatten an array, with the ability to define a depth.\n *\n * @param  {Array}  array\n * @param  {Number} depth\n * @return {Array}\n */\nfunction arrayFlatten (array, depth) {\n  if (depth == null) {\n    return flattenForever(array, [])\n  }\n\n  return flattenWithDepth(array, [], depth)\n}\n"]}