{"version":3,"sources":["../../../../node_modules/core-js/modules/es6.regexp.split.js"],"names":["isRegExp","require","anObject","speciesConstructor","advanceStringIndex","toLength","callRegExpExec","regexpExec","fails","$min","Math","min","$push","push","$SPLIT","LENGTH","LAST_INDEX","MAX_UINT32","SUPPORTS_Y","RegExp","defined","SPLIT","$split","maybeCallNative","internalSplit","separator","limit","string","String","undefined","call","output","flags","ignoreCase","multiline","unicode","sticky","lastLastIndex","splitLimit","separatorCopy","source","match","lastIndex","lastLength","slice","index","apply","test","split","O","splitter","regexp","res","done","value","rx","S","C","unicodeMatching","lim","length","p","q","A","z","e","i"],"mappings":"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","file":"es6.regexp.split.js","sourcesContent":["'use strict';\n\nvar isRegExp = require('./_is-regexp');\nvar anObject = require('./_an-object');\nvar speciesConstructor = require('./_species-constructor');\nvar advanceStringIndex = require('./_advance-string-index');\nvar toLength = require('./_to-length');\nvar callRegExpExec = require('./_regexp-exec-abstract');\nvar regexpExec = require('./_regexp-exec');\nvar fails = require('./_fails');\nvar $min = Math.min;\nvar $push = [].push;\nvar $SPLIT = 'split';\nvar LENGTH = 'length';\nvar LAST_INDEX = 'lastIndex';\nvar MAX_UINT32 = 0xffffffff;\n\n// babel-minify transpiles RegExp('x', 'y') -> /x/y and it causes SyntaxError\nvar SUPPORTS_Y = !fails(function () { RegExp(MAX_UINT32, 'y'); });\n\n// @@split logic\nrequire('./_fix-re-wks')('split', 2, function (defined, SPLIT, $split, maybeCallNative) {\n  var internalSplit;\n  if (\n    'abbc'[$SPLIT](/(b)*/)[1] == 'c' ||\n    'test'[$SPLIT](/(?:)/, -1)[LENGTH] != 4 ||\n    'ab'[$SPLIT](/(?:ab)*/)[LENGTH] != 2 ||\n    '.'[$SPLIT](/(.?)(.?)/)[LENGTH] != 4 ||\n    '.'[$SPLIT](/()()/)[LENGTH] > 1 ||\n    ''[$SPLIT](/.?/)[LENGTH]\n  ) {\n    // based on es5-shim implementation, need to rework it\n    internalSplit = function (separator, limit) {\n      var string = String(this);\n      if (separator === undefined && limit === 0) return [];\n      // If `separator` is not a regex, use native split\n      if (!isRegExp(separator)) return $split.call(string, separator, limit);\n      var output = [];\n      var flags = (separator.ignoreCase ? 'i' : '') +\n                  (separator.multiline ? 'm' : '') +\n                  (separator.unicode ? 'u' : '') +\n                  (separator.sticky ? 'y' : '');\n      var lastLastIndex = 0;\n      var splitLimit = limit === undefined ? MAX_UINT32 : limit >>> 0;\n      // Make `global` and avoid `lastIndex` issues by working with a copy\n      var separatorCopy = new RegExp(separator.source, flags + 'g');\n      var match, lastIndex, lastLength;\n      while (match = regexpExec.call(separatorCopy, string)) {\n        lastIndex = separatorCopy[LAST_INDEX];\n        if (lastIndex > lastLastIndex) {\n          output.push(string.slice(lastLastIndex, match.index));\n          if (match[LENGTH] > 1 && match.index < string[LENGTH]) $push.apply(output, match.slice(1));\n          lastLength = match[0][LENGTH];\n          lastLastIndex = lastIndex;\n          if (output[LENGTH] >= splitLimit) break;\n        }\n        if (separatorCopy[LAST_INDEX] === match.index) separatorCopy[LAST_INDEX]++; // Avoid an infinite loop\n      }\n      if (lastLastIndex === string[LENGTH]) {\n        if (lastLength || !separatorCopy.test('')) output.push('');\n      } else output.push(string.slice(lastLastIndex));\n      return output[LENGTH] > splitLimit ? output.slice(0, splitLimit) : output;\n    };\n  // Chakra, V8\n  } else if ('0'[$SPLIT](undefined, 0)[LENGTH]) {\n    internalSplit = function (separator, limit) {\n      return separator === undefined && limit === 0 ? [] : $split.call(this, separator, limit);\n    };\n  } else {\n    internalSplit = $split;\n  }\n\n  return [\n    // `String.prototype.split` method\n    // https://tc39.github.io/ecma262/#sec-string.prototype.split\n    function split(separator, limit) {\n      var O = defined(this);\n      var splitter = separator == undefined ? undefined : separator[SPLIT];\n      return splitter !== undefined\n        ? splitter.call(separator, O, limit)\n        : internalSplit.call(String(O), separator, limit);\n    },\n    // `RegExp.prototype[@@split]` method\n    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@split\n    //\n    // NOTE: This cannot be properly polyfilled in engines that don't support\n    // the 'y' flag.\n    function (regexp, limit) {\n      var res = maybeCallNative(internalSplit, regexp, this, limit, internalSplit !== $split);\n      if (res.done) return res.value;\n\n      var rx = anObject(regexp);\n      var S = String(this);\n      var C = speciesConstructor(rx, RegExp);\n\n      var unicodeMatching = rx.unicode;\n      var flags = (rx.ignoreCase ? 'i' : '') +\n                  (rx.multiline ? 'm' : '') +\n                  (rx.unicode ? 'u' : '') +\n                  (SUPPORTS_Y ? 'y' : 'g');\n\n      // ^(? + rx + ) is needed, in combination with some S slicing, to\n      // simulate the 'y' flag.\n      var splitter = new C(SUPPORTS_Y ? rx : '^(?:' + rx.source + ')', flags);\n      var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;\n      if (lim === 0) return [];\n      if (S.length === 0) return callRegExpExec(splitter, S) === null ? [S] : [];\n      var p = 0;\n      var q = 0;\n      var A = [];\n      while (q < S.length) {\n        splitter.lastIndex = SUPPORTS_Y ? q : 0;\n        var z = callRegExpExec(splitter, SUPPORTS_Y ? S : S.slice(q));\n        var e;\n        if (\n          z === null ||\n          (e = $min(toLength(splitter.lastIndex + (SUPPORTS_Y ? 0 : q)), S.length)) === p\n        ) {\n          q = advanceStringIndex(S, q, unicodeMatching);\n        } else {\n          A.push(S.slice(p, q));\n          if (A.length === lim) return A;\n          for (var i = 1; i <= z.length - 1; i++) {\n            A.push(z[i]);\n            if (A.length === lim) return A;\n          }\n          q = p = e;\n        }\n      }\n      A.push(S.slice(p));\n      return A;\n    }\n  ];\n});\n"]}