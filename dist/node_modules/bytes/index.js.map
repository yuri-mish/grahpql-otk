{"version":3,"sources":["../../../node_modules/bytes/index.js"],"names":["module","exports","bytes","format","parse","formatThousandsRegExp","formatDecimalsRegExp","map","b","kb","mb","gb","tb","Math","pow","pb","parseRegExp","value","options","Number","isFinite","mag","abs","thousandsSeparator","unitSeparator","decimalPlaces","undefined","fixedDecimals","Boolean","unit","toLowerCase","val","str","toFixed","replace","isNaN","results","exec","floatValue","parseInt","parseFloat","floor"],"mappings":"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","file":"index.js","sourcesContent":["/*!\n * bytes\n * Copyright(c) 2012-2014 TJ Holowaychuk\n * Copyright(c) 2015 Jed Watson\n * MIT Licensed\n */\n\n'use strict';\n\n/**\n * Module exports.\n * @public\n */\n\nmodule.exports = bytes;\nmodule.exports.format = format;\nmodule.exports.parse = parse;\n\n/**\n * Module variables.\n * @private\n */\n\nvar formatThousandsRegExp = /\\B(?=(\\d{3})+(?!\\d))/g;\n\nvar formatDecimalsRegExp = /(?:\\.0*|(\\.[^0]+)0+)$/;\n\nvar map = {\n  b:  1,\n  kb: 1 << 10,\n  mb: 1 << 20,\n  gb: 1 << 30,\n  tb: Math.pow(1024, 4),\n  pb: Math.pow(1024, 5),\n};\n\nvar parseRegExp = /^((-|\\+)?(\\d+(?:\\.\\d+)?)) *(kb|mb|gb|tb|pb)$/i;\n\n/**\n * Convert the given value in bytes into a string or parse to string to an integer in bytes.\n *\n * @param {string|number} value\n * @param {{\n *  case: [string],\n *  decimalPlaces: [number]\n *  fixedDecimals: [boolean]\n *  thousandsSeparator: [string]\n *  unitSeparator: [string]\n *  }} [options] bytes options.\n *\n * @returns {string|number|null}\n */\n\nfunction bytes(value, options) {\n  if (typeof value === 'string') {\n    return parse(value);\n  }\n\n  if (typeof value === 'number') {\n    return format(value, options);\n  }\n\n  return null;\n}\n\n/**\n * Format the given value in bytes into a string.\n *\n * If the value is negative, it is kept as such. If it is a float,\n * it is rounded.\n *\n * @param {number} value\n * @param {object} [options]\n * @param {number} [options.decimalPlaces=2]\n * @param {number} [options.fixedDecimals=false]\n * @param {string} [options.thousandsSeparator=]\n * @param {string} [options.unit=]\n * @param {string} [options.unitSeparator=]\n *\n * @returns {string|null}\n * @public\n */\n\nfunction format(value, options) {\n  if (!Number.isFinite(value)) {\n    return null;\n  }\n\n  var mag = Math.abs(value);\n  var thousandsSeparator = (options && options.thousandsSeparator) || '';\n  var unitSeparator = (options && options.unitSeparator) || '';\n  var decimalPlaces = (options && options.decimalPlaces !== undefined) ? options.decimalPlaces : 2;\n  var fixedDecimals = Boolean(options && options.fixedDecimals);\n  var unit = (options && options.unit) || '';\n\n  if (!unit || !map[unit.toLowerCase()]) {\n    if (mag >= map.pb) {\n      unit = 'PB';\n    } else if (mag >= map.tb) {\n      unit = 'TB';\n    } else if (mag >= map.gb) {\n      unit = 'GB';\n    } else if (mag >= map.mb) {\n      unit = 'MB';\n    } else if (mag >= map.kb) {\n      unit = 'KB';\n    } else {\n      unit = 'B';\n    }\n  }\n\n  var val = value / map[unit.toLowerCase()];\n  var str = val.toFixed(decimalPlaces);\n\n  if (!fixedDecimals) {\n    str = str.replace(formatDecimalsRegExp, '$1');\n  }\n\n  if (thousandsSeparator) {\n    str = str.replace(formatThousandsRegExp, thousandsSeparator);\n  }\n\n  return str + unitSeparator + unit;\n}\n\n/**\n * Parse the string value into an integer in bytes.\n *\n * If no unit is given, it is assumed the value is in bytes.\n *\n * @param {number|string} val\n *\n * @returns {number|null}\n * @public\n */\n\nfunction parse(val) {\n  if (typeof val === 'number' && !isNaN(val)) {\n    return val;\n  }\n\n  if (typeof val !== 'string') {\n    return null;\n  }\n\n  // Test if the string passed is valid\n  var results = parseRegExp.exec(val);\n  var floatValue;\n  var unit = 'b';\n\n  if (!results) {\n    // Nothing could be extracted from the given string\n    floatValue = parseInt(val, 10);\n    unit = 'b'\n  } else {\n    // Retrieve the value and the unit\n    floatValue = parseFloat(results[1]);\n    unit = results[4].toLowerCase();\n  }\n\n  return Math.floor(map[unit] * floatValue);\n}\n"]}