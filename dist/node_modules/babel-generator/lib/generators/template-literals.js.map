{"version":3,"sources":["../../../../../node_modules/babel-generator/lib/generators/template-literals.js"],"names":["exports","__esModule","TaggedTemplateExpression","TemplateElement","TemplateLiteral","node","print","tag","quasi","parent","isFirst","quasis","isLast","length","value","raw","token","i","expressions"],"mappings":"AAAA;;AAEAA,QAAQC,UAAR,GAAqB,IAArB;AACAD,QAAQE,wBAAR,GAAmCA,wBAAnC;AACAF,QAAQG,eAAR,GAA0BA,eAA1B;AACAH,QAAQI,eAAR,GAA0BA,eAA1B;AACA,SAASF,wBAAT,CAAkCG,IAAlC,EAAwC;AACtC,OAAKC,KAAL,CAAWD,KAAKE,GAAhB,EAAqBF,IAArB;AACA,OAAKC,KAAL,CAAWD,KAAKG,KAAhB,EAAuBH,IAAvB;AACD;;AAED,SAASF,eAAT,CAAyBE,IAAzB,EAA+BI,MAA/B,EAAuC;AACrC,MAAIC,UAAUD,OAAOE,MAAP,CAAc,CAAd,MAAqBN,IAAnC;AACA,MAAIO,SAASH,OAAOE,MAAP,CAAcF,OAAOE,MAAP,CAAcE,MAAd,GAAuB,CAArC,MAA4CR,IAAzD;;AAEA,MAAIS,QAAQ,CAACJ,UAAU,GAAV,GAAgB,GAAjB,IAAwBL,KAAKS,KAAL,CAAWC,GAAnC,IAA0CH,SAAS,GAAT,GAAe,IAAzD,CAAZ;;AAEA,OAAKI,KAAL,CAAWF,KAAX;AACD;;AAED,SAASV,eAAT,CAAyBC,IAAzB,EAA+B;AAC7B,MAAIM,SAASN,KAAKM,MAAlB;;AAEA,OAAK,IAAIM,IAAI,CAAb,EAAgBA,IAAIN,OAAOE,MAA3B,EAAmCI,GAAnC,EAAwC;AACtC,SAAKX,KAAL,CAAWK,OAAOM,CAAP,CAAX,EAAsBZ,IAAtB;;AAEA,QAAIY,IAAI,CAAJ,GAAQN,OAAOE,MAAnB,EAA2B;AACzB,WAAKP,KAAL,CAAWD,KAAKa,WAAL,CAAiBD,CAAjB,CAAX,EAAgCZ,IAAhC;AACD;AACF;AACF","file":"template-literals.js","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports.TaggedTemplateExpression = TaggedTemplateExpression;\nexports.TemplateElement = TemplateElement;\nexports.TemplateLiteral = TemplateLiteral;\nfunction TaggedTemplateExpression(node) {\n  this.print(node.tag, node);\n  this.print(node.quasi, node);\n}\n\nfunction TemplateElement(node, parent) {\n  var isFirst = parent.quasis[0] === node;\n  var isLast = parent.quasis[parent.quasis.length - 1] === node;\n\n  var value = (isFirst ? \"`\" : \"}\") + node.value.raw + (isLast ? \"`\" : \"${\");\n\n  this.token(value);\n}\n\nfunction TemplateLiteral(node) {\n  var quasis = node.quasis;\n\n  for (var i = 0; i < quasis.length; i++) {\n    this.print(quasis[i], node);\n\n    if (i + 1 < quasis.length) {\n      this.print(node.expressions[i], node);\n    }\n  }\n}"]}