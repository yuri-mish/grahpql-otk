{"version":3,"sources":["../../../node_modules/bignumber.js/bignumber.js"],"names":["globalObject","BigNumber","isNumeric","mathceil","Math","ceil","mathfloor","floor","bignumberError","tooManyDigits","BASE","LOG_BASE","MAX_SAFE_INTEGER","POWS_TEN","SQRT_BASE","MAX","clone","configObject","div","convertBase","parseNumeric","P","prototype","constructor","toString","valueOf","ONE","DECIMAL_PLACES","ROUNDING_MODE","TO_EXP_NEG","TO_EXP_POS","MIN_EXP","MAX_EXP","CRYPTO","MODULO_MODE","POW_PRECISION","FORMAT","prefix","groupSize","secondaryGroupSize","groupSeparator","decimalSeparator","fractionGroupSize","fractionGroupSeparator","suffix","ALPHABET","v","b","alphabet","c","caseChanged","e","i","isNum","len","str","x","_isBigNumber","s","slice","String","test","charCodeAt","indexOf","replace","search","substring","length","intCheck","round","DEBUG","Error","charAt","toUpperCase","toLowerCase","push","ROUND_UP","ROUND_DOWN","ROUND_CEIL","ROUND_FLOOR","ROUND_HALF_UP","ROUND_HALF_DOWN","ROUND_HALF_EVEN","ROUND_HALF_CEIL","ROUND_HALF_FLOOR","EUCLID","config","set","obj","p","hasOwnProperty","pop","crypto","getRandomValues","randomBytes","EXPONENTIAL_AT","RANGE","isBigNumber","n","out","call","maximum","max","maxOrMin","arguments","lt","minimum","min","gt","random","pow2_53","random53bitInt","dp","a","k","rand","Uint32Array","copy","splice","sum","args","plus","decimal","toBaseOut","baseIn","baseOut","j","arr","arrL","reverse","sign","callerIsToString","d","r","xc","y","rm","pow","toFixedPoint","coeffToString","concat","multiply","base","m","temp","xlo","xhi","carry","klo","khi","compare","aL","bL","cmp","subtract","more","prod","prodL","q","qc","rem","remL","rem0","xi","xL","yc0","yL","yz","yc","NaN","bitFloor","format","id","c0","ne","toExponential","method","normalise","basePrefix","dotAfter","dotBefore","isInfinityOrNaN","whitespaceOrPlus","isNaN","p1","p2","sd","ni","rd","pows10","absoluteValue","abs","comparedTo","decimalPlaces","dividedBy","dividedToIntegerBy","idiv","exponentiatedBy","half","isModExp","nIsBig","nIsNeg","nIsOdd","isInteger","isOdd","mod","times","integerValue","isEqualTo","eq","isFinite","isGreaterThan","isGreaterThanOrEqualTo","gte","isLessThan","isLessThanOrEqualTo","lte","isNegative","isPositive","isZero","minus","t","xLTy","xe","ye","modulo","multipliedBy","xcL","ycL","ylo","yhi","zc","sqrtBase","negated","precision","shiftedBy","squareRoot","sqrt","rep","toFixed","toFormat","split","g1","g2","intPart","fractionPart","isNeg","intDigits","substr","RegExp","toFraction","md","d0","d1","d2","exp","n0","n1","toNumber","toPrecision","toJSON","z","l","name","zs","define","amd","module","exports","self","window"],"mappings":"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","file":"bignumber.js","sourcesContent":[";(function (globalObject) {\r\n  'use strict';\r\n\r\n/*\r\n *      bignumber.js v9.0.1\r\n *      A JavaScript library for arbitrary-precision arithmetic.\r\n *      https://github.com/MikeMcl/bignumber.js\r\n *      Copyright (c) 2020 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *      MIT Licensed.\r\n *\r\n *      BigNumber.prototype methods     |  BigNumber methods\r\n *                                      |\r\n *      absoluteValue            abs    |  clone\r\n *      comparedTo                      |  config               set\r\n *      decimalPlaces            dp     |      DECIMAL_PLACES\r\n *      dividedBy                div    |      ROUNDING_MODE\r\n *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT\r\n *      exponentiatedBy          pow    |      RANGE\r\n *      integerValue                    |      CRYPTO\r\n *      isEqualTo                eq     |      MODULO_MODE\r\n *      isFinite                        |      POW_PRECISION\r\n *      isGreaterThan            gt     |      FORMAT\r\n *      isGreaterThanOrEqualTo   gte    |      ALPHABET\r\n *      isInteger                       |  isBigNumber\r\n *      isLessThan               lt     |  maximum              max\r\n *      isLessThanOrEqualTo      lte    |  minimum              min\r\n *      isNaN                           |  random\r\n *      isNegative                      |  sum\r\n *      isPositive                      |\r\n *      isZero                          |\r\n *      minus                           |\r\n *      modulo                   mod    |\r\n *      multipliedBy             times  |\r\n *      negated                         |\r\n *      plus                            |\r\n *      precision                sd     |\r\n *      shiftedBy                       |\r\n *      squareRoot               sqrt   |\r\n *      toExponential                   |\r\n *      toFixed                         |\r\n *      toFormat                        |\r\n *      toFraction                      |\r\n *      toJSON                          |\r\n *      toNumber                        |\r\n *      toPrecision                     |\r\n *      toString                        |\r\n *      valueOf                         |\r\n *\r\n */\r\n\r\n\r\n  var BigNumber,\r\n    isNumeric = /^-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?$/i,\r\n    mathceil = Math.ceil,\r\n    mathfloor = Math.floor,\r\n\r\n    bignumberError = '[BigNumber Error] ',\r\n    tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',\r\n\r\n    BASE = 1e14,\r\n    LOG_BASE = 14,\r\n    MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1\r\n    // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1\r\n    POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],\r\n    SQRT_BASE = 1e7,\r\n\r\n    // EDITABLE\r\n    // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and\r\n    // the arguments to toExponential, toFixed, toFormat, and toPrecision.\r\n    MAX = 1E9;                                   // 0 to MAX_INT32\r\n\r\n\r\n  /*\r\n   * Create and return a BigNumber constructor.\r\n   */\r\n  function clone(configObject) {\r\n    var div, convertBase, parseNumeric,\r\n      P = BigNumber.prototype = { constructor: BigNumber, toString: null, valueOf: null },\r\n      ONE = new BigNumber(1),\r\n\r\n\r\n      //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------\r\n\r\n\r\n      // The default values below must be integers within the inclusive ranges stated.\r\n      // The values can also be changed at run-time using BigNumber.set.\r\n\r\n      // The maximum number of decimal places for operations involving division.\r\n      DECIMAL_PLACES = 20,                     // 0 to MAX\r\n\r\n      // The rounding mode used when rounding to the above decimal places, and when using\r\n      // toExponential, toFixed, toFormat and toPrecision, and round (default value).\r\n      // UP         0 Away from zero.\r\n      // DOWN       1 Towards zero.\r\n      // CEIL       2 Towards +Infinity.\r\n      // FLOOR      3 Towards -Infinity.\r\n      // HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n      // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n      // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n      // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n      // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n      ROUNDING_MODE = 4,                       // 0 to 8\r\n\r\n      // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\r\n\r\n      // The exponent value at and beneath which toString returns exponential notation.\r\n      // Number type: -7\r\n      TO_EXP_NEG = -7,                         // 0 to -MAX\r\n\r\n      // The exponent value at and above which toString returns exponential notation.\r\n      // Number type: 21\r\n      TO_EXP_POS = 21,                         // 0 to MAX\r\n\r\n      // RANGE : [MIN_EXP, MAX_EXP]\r\n\r\n      // The minimum exponent value, beneath which underflow to zero occurs.\r\n      // Number type: -324  (5e-324)\r\n      MIN_EXP = -1e7,                          // -1 to -MAX\r\n\r\n      // The maximum exponent value, above which overflow to Infinity occurs.\r\n      // Number type:  308  (1.7976931348623157e+308)\r\n      // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.\r\n      MAX_EXP = 1e7,                           // 1 to MAX\r\n\r\n      // Whether to use cryptographically-secure random number generation, if available.\r\n      CRYPTO = false,                          // true or false\r\n\r\n      // The modulo mode used when calculating the modulus: a mod n.\r\n      // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n      // The remainder (r) is calculated as: r = a - n * q.\r\n      //\r\n      // UP        0 The remainder is positive if the dividend is negative, else is negative.\r\n      // DOWN      1 The remainder has the same sign as the dividend.\r\n      //             This modulo mode is commonly known as 'truncated division' and is\r\n      //             equivalent to (a % n) in JavaScript.\r\n      // FLOOR     3 The remainder has the same sign as the divisor (Python %).\r\n      // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.\r\n      // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).\r\n      //             The remainder is always positive.\r\n      //\r\n      // The truncated division, floored division, Euclidian division and IEEE 754 remainder\r\n      // modes are commonly used for the modulus operation.\r\n      // Although the other rounding modes can also be used, they may not give useful results.\r\n      MODULO_MODE = 1,                         // 0 to 9\r\n\r\n      // The maximum number of significant digits of the result of the exponentiatedBy operation.\r\n      // If POW_PRECISION is 0, there will be unlimited significant digits.\r\n      POW_PRECISION = 0,                    // 0 to MAX\r\n\r\n      // The format specification used by the BigNumber.prototype.toFormat method.\r\n      FORMAT = {\r\n        prefix: '',\r\n        groupSize: 3,\r\n        secondaryGroupSize: 0,\r\n        groupSeparator: ',',\r\n        decimalSeparator: '.',\r\n        fractionGroupSize: 0,\r\n        fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n        suffix: ''\r\n      },\r\n\r\n      // The alphabet used for base conversion. It must be at least 2 characters long, with no '+',\r\n      // '-', '.', whitespace, or repeated character.\r\n      // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'\r\n      ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz';\r\n\r\n\r\n    //------------------------------------------------------------------------------------------\r\n\r\n\r\n    // CONSTRUCTOR\r\n\r\n\r\n    /*\r\n     * The BigNumber constructor and exported function.\r\n     * Create and return a new instance of a BigNumber object.\r\n     *\r\n     * v {number|string|BigNumber} A numeric value.\r\n     * [b] {number} The base of v. Integer, 2 to ALPHABET.length inclusive.\r\n     */\r\n    function BigNumber(v, b) {\r\n      var alphabet, c, caseChanged, e, i, isNum, len, str,\r\n        x = this;\r\n\r\n      // Enable constructor call without `new`.\r\n      if (!(x instanceof BigNumber)) return new BigNumber(v, b);\r\n\r\n      if (b == null) {\r\n\r\n        if (v && v._isBigNumber === true) {\r\n          x.s = v.s;\r\n\r\n          if (!v.c || v.e > MAX_EXP) {\r\n            x.c = x.e = null;\r\n          } else if (v.e < MIN_EXP) {\r\n            x.c = [x.e = 0];\r\n          } else {\r\n            x.e = v.e;\r\n            x.c = v.c.slice();\r\n          }\r\n\r\n          return;\r\n        }\r\n\r\n        if ((isNum = typeof v == 'number') && v * 0 == 0) {\r\n\r\n          // Use `1 / n` to handle minus zero also.\r\n          x.s = 1 / v < 0 ? (v = -v, -1) : 1;\r\n\r\n          // Fast path for integers, where n < 2147483648 (2**31).\r\n          if (v === ~~v) {\r\n            for (e = 0, i = v; i >= 10; i /= 10, e++);\r\n\r\n            if (e > MAX_EXP) {\r\n              x.c = x.e = null;\r\n            } else {\r\n              x.e = e;\r\n              x.c = [v];\r\n            }\r\n\r\n            return;\r\n          }\r\n\r\n          str = String(v);\r\n        } else {\r\n\r\n          if (!isNumeric.test(str = String(v))) return parseNumeric(x, str, isNum);\r\n\r\n          x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;\r\n        }\r\n\r\n        // Decimal point?\r\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n        // Exponential form?\r\n        if ((i = str.search(/e/i)) > 0) {\r\n\r\n          // Determine exponent.\r\n          if (e < 0) e = i;\r\n          e += +str.slice(i + 1);\r\n          str = str.substring(0, i);\r\n        } else if (e < 0) {\r\n\r\n          // Integer.\r\n          e = str.length;\r\n        }\r\n\r\n      } else {\r\n\r\n        // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n        intCheck(b, 2, ALPHABET.length, 'Base');\r\n\r\n        // Allow exponential notation to be used with base 10 argument, while\r\n        // also rounding to DECIMAL_PLACES as with other bases.\r\n        if (b == 10) {\r\n          x = new BigNumber(v);\r\n          return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);\r\n        }\r\n\r\n        str = String(v);\r\n\r\n        if (isNum = typeof v == 'number') {\r\n\r\n          // Avoid potential interpretation of Infinity and NaN as base 44+ values.\r\n          if (v * 0 != 0) return parseNumeric(x, str, isNum, b);\r\n\r\n          x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1;\r\n\r\n          // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n          if (BigNumber.DEBUG && str.replace(/^0\\.0*|\\./, '').length > 15) {\r\n            throw Error\r\n             (tooManyDigits + v);\r\n          }\r\n        } else {\r\n          x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;\r\n        }\r\n\r\n        alphabet = ALPHABET.slice(0, b);\r\n        e = i = 0;\r\n\r\n        // Check that str is a valid base b number.\r\n        // Don't use RegExp, so alphabet can contain special characters.\r\n        for (len = str.length; i < len; i++) {\r\n          if (alphabet.indexOf(c = str.charAt(i)) < 0) {\r\n            if (c == '.') {\r\n\r\n              // If '.' is not the first character and it has not be found before.\r\n              if (i > e) {\r\n                e = len;\r\n                continue;\r\n              }\r\n            } else if (!caseChanged) {\r\n\r\n              // Allow e.g. hexadecimal 'FF' as well as 'ff'.\r\n              if (str == str.toUpperCase() && (str = str.toLowerCase()) ||\r\n                  str == str.toLowerCase() && (str = str.toUpperCase())) {\r\n                caseChanged = true;\r\n                i = -1;\r\n                e = 0;\r\n                continue;\r\n              }\r\n            }\r\n\r\n            return parseNumeric(x, String(v), isNum, b);\r\n          }\r\n        }\r\n\r\n        // Prevent later check for length on converted number.\r\n        isNum = false;\r\n        str = convertBase(str, b, 10, x.s);\r\n\r\n        // Decimal point?\r\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n        else e = str.length;\r\n      }\r\n\r\n      // Determine leading zeros.\r\n      for (i = 0; str.charCodeAt(i) === 48; i++);\r\n\r\n      // Determine trailing zeros.\r\n      for (len = str.length; str.charCodeAt(--len) === 48;);\r\n\r\n      if (str = str.slice(i, ++len)) {\r\n        len -= i;\r\n\r\n        // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n        if (isNum && BigNumber.DEBUG &&\r\n          len > 15 && (v > MAX_SAFE_INTEGER || v !== mathfloor(v))) {\r\n            throw Error\r\n             (tooManyDigits + (x.s * v));\r\n        }\r\n\r\n         // Overflow?\r\n        if ((e = e - i - 1) > MAX_EXP) {\r\n\r\n          // Infinity.\r\n          x.c = x.e = null;\r\n\r\n        // Underflow?\r\n        } else if (e < MIN_EXP) {\r\n\r\n          // Zero.\r\n          x.c = [x.e = 0];\r\n        } else {\r\n          x.e = e;\r\n          x.c = [];\r\n\r\n          // Transform base\r\n\r\n          // e is the base 10 exponent.\r\n          // i is where to slice str to get the first element of the coefficient array.\r\n          i = (e + 1) % LOG_BASE;\r\n          if (e < 0) i += LOG_BASE;  // i < 1\r\n\r\n          if (i < len) {\r\n            if (i) x.c.push(+str.slice(0, i));\r\n\r\n            for (len -= LOG_BASE; i < len;) {\r\n              x.c.push(+str.slice(i, i += LOG_BASE));\r\n            }\r\n\r\n            i = LOG_BASE - (str = str.slice(i)).length;\r\n          } else {\r\n            i -= len;\r\n          }\r\n\r\n          for (; i--; str += '0');\r\n          x.c.push(+str);\r\n        }\r\n      } else {\r\n\r\n        // Zero.\r\n        x.c = [x.e = 0];\r\n      }\r\n    }\r\n\r\n\r\n    // CONSTRUCTOR PROPERTIES\r\n\r\n\r\n    BigNumber.clone = clone;\r\n\r\n    BigNumber.ROUND_UP = 0;\r\n    BigNumber.ROUND_DOWN = 1;\r\n    BigNumber.ROUND_CEIL = 2;\r\n    BigNumber.ROUND_FLOOR = 3;\r\n    BigNumber.ROUND_HALF_UP = 4;\r\n    BigNumber.ROUND_HALF_DOWN = 5;\r\n    BigNumber.ROUND_HALF_EVEN = 6;\r\n    BigNumber.ROUND_HALF_CEIL = 7;\r\n    BigNumber.ROUND_HALF_FLOOR = 8;\r\n    BigNumber.EUCLID = 9;\r\n\r\n\r\n    /*\r\n     * Configure infrequently-changing library-wide settings.\r\n     *\r\n     * Accept an object with the following optional properties (if the value of a property is\r\n     * a number, it must be an integer within the inclusive range stated):\r\n     *\r\n     *   DECIMAL_PLACES   {number}           0 to MAX\r\n     *   ROUNDING_MODE    {number}           0 to 8\r\n     *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]\r\n     *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]\r\n     *   CRYPTO           {boolean}          true or false\r\n     *   MODULO_MODE      {number}           0 to 9\r\n     *   POW_PRECISION       {number}           0 to MAX\r\n     *   ALPHABET         {string}           A string of two or more unique characters which does\r\n     *                                       not contain '.'.\r\n     *   FORMAT           {object}           An object with some of the following properties:\r\n     *     prefix                 {string}\r\n     *     groupSize              {number}\r\n     *     secondaryGroupSize     {number}\r\n     *     groupSeparator         {string}\r\n     *     decimalSeparator       {string}\r\n     *     fractionGroupSize      {number}\r\n     *     fractionGroupSeparator {string}\r\n     *     suffix                 {string}\r\n     *\r\n     * (The values assigned to the above FORMAT object properties are not checked for validity.)\r\n     *\r\n     * E.g.\r\n     * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\r\n     *\r\n     * Ignore properties/parameters set to null or undefined, except for ALPHABET.\r\n     *\r\n     * Return an object with the properties current values.\r\n     */\r\n    BigNumber.config = BigNumber.set = function (obj) {\r\n      var p, v;\r\n\r\n      if (obj != null) {\r\n\r\n        if (typeof obj == 'object') {\r\n\r\n          // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.\r\n          // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, MAX, p);\r\n            DECIMAL_PLACES = v;\r\n          }\r\n\r\n          // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.\r\n          // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, 8, p);\r\n            ROUNDING_MODE = v;\r\n          }\r\n\r\n          // EXPONENTIAL_AT {number|number[]}\r\n          // Integer, -MAX to MAX inclusive or\r\n          // [integer -MAX to 0 inclusive, 0 to MAX inclusive].\r\n          // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {\r\n            v = obj[p];\r\n            if (v && v.pop) {\r\n              intCheck(v[0], -MAX, 0, p);\r\n              intCheck(v[1], 0, MAX, p);\r\n              TO_EXP_NEG = v[0];\r\n              TO_EXP_POS = v[1];\r\n            } else {\r\n              intCheck(v, -MAX, MAX, p);\r\n              TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);\r\n            }\r\n          }\r\n\r\n          // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or\r\n          // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].\r\n          // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'\r\n          if (obj.hasOwnProperty(p = 'RANGE')) {\r\n            v = obj[p];\r\n            if (v && v.pop) {\r\n              intCheck(v[0], -MAX, -1, p);\r\n              intCheck(v[1], 1, MAX, p);\r\n              MIN_EXP = v[0];\r\n              MAX_EXP = v[1];\r\n            } else {\r\n              intCheck(v, -MAX, MAX, p);\r\n              if (v) {\r\n                MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);\r\n              } else {\r\n                throw Error\r\n                 (bignumberError + p + ' cannot be zero: ' + v);\r\n              }\r\n            }\r\n          }\r\n\r\n          // CRYPTO {boolean} true or false.\r\n          // '[BigNumber Error] CRYPTO not true or false: {v}'\r\n          // '[BigNumber Error] crypto unavailable'\r\n          if (obj.hasOwnProperty(p = 'CRYPTO')) {\r\n            v = obj[p];\r\n            if (v === !!v) {\r\n              if (v) {\r\n                if (typeof crypto != 'undefined' && crypto &&\r\n                 (crypto.getRandomValues || crypto.randomBytes)) {\r\n                  CRYPTO = v;\r\n                } else {\r\n                  CRYPTO = !v;\r\n                  throw Error\r\n                   (bignumberError + 'crypto unavailable');\r\n                }\r\n              } else {\r\n                CRYPTO = v;\r\n              }\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' not true or false: ' + v);\r\n            }\r\n          }\r\n\r\n          // MODULO_MODE {number} Integer, 0 to 9 inclusive.\r\n          // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'MODULO_MODE')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, 9, p);\r\n            MODULO_MODE = v;\r\n          }\r\n\r\n          // POW_PRECISION {number} Integer, 0 to MAX inclusive.\r\n          // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'POW_PRECISION')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, MAX, p);\r\n            POW_PRECISION = v;\r\n          }\r\n\r\n          // FORMAT {object}\r\n          // '[BigNumber Error] FORMAT not an object: {v}'\r\n          if (obj.hasOwnProperty(p = 'FORMAT')) {\r\n            v = obj[p];\r\n            if (typeof v == 'object') FORMAT = v;\r\n            else throw Error\r\n             (bignumberError + p + ' not an object: ' + v);\r\n          }\r\n\r\n          // ALPHABET {string}\r\n          // '[BigNumber Error] ALPHABET invalid: {v}'\r\n          if (obj.hasOwnProperty(p = 'ALPHABET')) {\r\n            v = obj[p];\r\n\r\n            // Disallow if less than two characters,\r\n            // or if it contains '+', '-', '.', whitespace, or a repeated character.\r\n            if (typeof v == 'string' && !/^.?$|[+\\-.\\s]|(.).*\\1/.test(v)) {\r\n              ALPHABET = v;\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' invalid: ' + v);\r\n            }\r\n          }\r\n\r\n        } else {\r\n\r\n          // '[BigNumber Error] Object expected: {v}'\r\n          throw Error\r\n           (bignumberError + 'Object expected: ' + obj);\r\n        }\r\n      }\r\n\r\n      return {\r\n        DECIMAL_PLACES: DECIMAL_PLACES,\r\n        ROUNDING_MODE: ROUNDING_MODE,\r\n        EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],\r\n        RANGE: [MIN_EXP, MAX_EXP],\r\n        CRYPTO: CRYPTO,\r\n        MODULO_MODE: MODULO_MODE,\r\n        POW_PRECISION: POW_PRECISION,\r\n        FORMAT: FORMAT,\r\n        ALPHABET: ALPHABET\r\n      };\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if v is a BigNumber instance, otherwise return false.\r\n     *\r\n     * If BigNumber.DEBUG is true, throw if a BigNumber instance is not well-formed.\r\n     *\r\n     * v {any}\r\n     *\r\n     * '[BigNumber Error] Invalid BigNumber: {v}'\r\n     */\r\n    BigNumber.isBigNumber = function (v) {\r\n      if (!v || v._isBigNumber !== true) return false;\r\n      if (!BigNumber.DEBUG) return true;\r\n\r\n      var i, n,\r\n        c = v.c,\r\n        e = v.e,\r\n        s = v.s;\r\n\r\n      out: if ({}.toString.call(c) == '[object Array]') {\r\n\r\n        if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {\r\n\r\n          // If the first element is zero, the BigNumber value must be zero.\r\n          if (c[0] === 0) {\r\n            if (e === 0 && c.length === 1) return true;\r\n            break out;\r\n          }\r\n\r\n          // Calculate number of digits that c[0] should have, based on the exponent.\r\n          i = (e + 1) % LOG_BASE;\r\n          if (i < 1) i += LOG_BASE;\r\n\r\n          // Calculate number of digits of c[0].\r\n          //if (Math.ceil(Math.log(c[0] + 1) / Math.LN10) == i) {\r\n          if (String(c[0]).length == i) {\r\n\r\n            for (i = 0; i < c.length; i++) {\r\n              n = c[i];\r\n              if (n < 0 || n >= BASE || n !== mathfloor(n)) break out;\r\n            }\r\n\r\n            // Last element cannot be zero, unless it is the only element.\r\n            if (n !== 0) return true;\r\n          }\r\n        }\r\n\r\n      // Infinity/NaN\r\n      } else if (c === null && e === null && (s === null || s === 1 || s === -1)) {\r\n        return true;\r\n      }\r\n\r\n      throw Error\r\n        (bignumberError + 'Invalid BigNumber: ' + v);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the maximum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.maximum = BigNumber.max = function () {\r\n      return maxOrMin(arguments, P.lt);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the minimum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.minimum = BigNumber.min = function () {\r\n      return maxOrMin(arguments, P.gt);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,\r\n     * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing\r\n     * zeros are produced).\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'\r\n     * '[BigNumber Error] crypto unavailable'\r\n     */\r\n    BigNumber.random = (function () {\r\n      var pow2_53 = 0x20000000000000;\r\n\r\n      // Return a 53 bit integer n, where 0 <= n < 9007199254740992.\r\n      // Check if Math.random() produces more than 32 bits of randomness.\r\n      // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.\r\n      // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.\r\n      var random53bitInt = (Math.random() * pow2_53) & 0x1fffff\r\n       ? function () { return mathfloor(Math.random() * pow2_53); }\r\n       : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +\r\n         (Math.random() * 0x800000 | 0); };\r\n\r\n      return function (dp) {\r\n        var a, b, e, k, v,\r\n          i = 0,\r\n          c = [],\r\n          rand = new BigNumber(ONE);\r\n\r\n        if (dp == null) dp = DECIMAL_PLACES;\r\n        else intCheck(dp, 0, MAX);\r\n\r\n        k = mathceil(dp / LOG_BASE);\r\n\r\n        if (CRYPTO) {\r\n\r\n          // Browsers supporting crypto.getRandomValues.\r\n          if (crypto.getRandomValues) {\r\n\r\n            a = crypto.getRandomValues(new Uint32Array(k *= 2));\r\n\r\n            for (; i < k;) {\r\n\r\n              // 53 bits:\r\n              // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)\r\n              // 11111 11111111 11111111 11111111 11100000 00000000 00000000\r\n              // ((Math.pow(2, 32) - 1) >>> 11).toString(2)\r\n              //                                     11111 11111111 11111111\r\n              // 0x20000 is 2^21.\r\n              v = a[i] * 0x20000 + (a[i + 1] >>> 11);\r\n\r\n              // Rejection sampling:\r\n              // 0 <= v < 9007199254740992\r\n              // Probability that v >= 9e15, is\r\n              // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251\r\n              if (v >= 9e15) {\r\n                b = crypto.getRandomValues(new Uint32Array(2));\r\n                a[i] = b[0];\r\n                a[i + 1] = b[1];\r\n              } else {\r\n\r\n                // 0 <= v <= 8999999999999999\r\n                // 0 <= (v % 1e14) <= 99999999999999\r\n                c.push(v % 1e14);\r\n                i += 2;\r\n              }\r\n            }\r\n            i = k / 2;\r\n\r\n          // Node.js supporting crypto.randomBytes.\r\n          } else if (crypto.randomBytes) {\r\n\r\n            // buffer\r\n            a = crypto.randomBytes(k *= 7);\r\n\r\n            for (; i < k;) {\r\n\r\n              // 0x1000000000000 is 2^48, 0x10000000000 is 2^40\r\n              // 0x100000000 is 2^32, 0x1000000 is 2^24\r\n              // 11111 11111111 11111111 11111111 11111111 11111111 11111111\r\n              // 0 <= v < 9007199254740992\r\n              v = ((a[i] & 31) * 0x1000000000000) + (a[i + 1] * 0x10000000000) +\r\n                 (a[i + 2] * 0x100000000) + (a[i + 3] * 0x1000000) +\r\n                 (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];\r\n\r\n              if (v >= 9e15) {\r\n                crypto.randomBytes(7).copy(a, i);\r\n              } else {\r\n\r\n                // 0 <= (v % 1e14) <= 99999999999999\r\n                c.push(v % 1e14);\r\n                i += 7;\r\n              }\r\n            }\r\n            i = k / 7;\r\n          } else {\r\n            CRYPTO = false;\r\n            throw Error\r\n             (bignumberError + 'crypto unavailable');\r\n          }\r\n        }\r\n\r\n        // Use Math.random.\r\n        if (!CRYPTO) {\r\n\r\n          for (; i < k;) {\r\n            v = random53bitInt();\r\n            if (v < 9e15) c[i++] = v % 1e14;\r\n          }\r\n        }\r\n\r\n        k = c[--i];\r\n        dp %= LOG_BASE;\r\n\r\n        // Convert trailing digits to zeros according to dp.\r\n        if (k && dp) {\r\n          v = POWS_TEN[LOG_BASE - dp];\r\n          c[i] = mathfloor(k / v) * v;\r\n        }\r\n\r\n        // Remove trailing elements which are zero.\r\n        for (; c[i] === 0; c.pop(), i--);\r\n\r\n        // Zero?\r\n        if (i < 0) {\r\n          c = [e = 0];\r\n        } else {\r\n\r\n          // Remove leading elements which are zero and adjust exponent accordingly.\r\n          for (e = -1 ; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);\r\n\r\n          // Count the digits of the first element of c to determine leading zeros, and...\r\n          for (i = 1, v = c[0]; v >= 10; v /= 10, i++);\r\n\r\n          // adjust the exponent accordingly.\r\n          if (i < LOG_BASE) e -= LOG_BASE - i;\r\n        }\r\n\r\n        rand.e = e;\r\n        rand.c = c;\r\n        return rand;\r\n      };\r\n    })();\r\n\r\n\r\n    /*\r\n     * Return a BigNumber whose value is the sum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.sum = function () {\r\n      var i = 1,\r\n        args = arguments,\r\n        sum = new BigNumber(args[0]);\r\n      for (; i < args.length;) sum = sum.plus(args[i++]);\r\n      return sum;\r\n    };\r\n\r\n\r\n    // PRIVATE FUNCTIONS\r\n\r\n\r\n    // Called by BigNumber and BigNumber.prototype.toString.\r\n    convertBase = (function () {\r\n      var decimal = '0123456789';\r\n\r\n      /*\r\n       * Convert string of baseIn to an array of numbers of baseOut.\r\n       * Eg. toBaseOut('255', 10, 16) returns [15, 15].\r\n       * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].\r\n       */\r\n      function toBaseOut(str, baseIn, baseOut, alphabet) {\r\n        var j,\r\n          arr = [0],\r\n          arrL,\r\n          i = 0,\r\n          len = str.length;\r\n\r\n        for (; i < len;) {\r\n          for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);\r\n\r\n          arr[0] += alphabet.indexOf(str.charAt(i++));\r\n\r\n          for (j = 0; j < arr.length; j++) {\r\n\r\n            if (arr[j] > baseOut - 1) {\r\n              if (arr[j + 1] == null) arr[j + 1] = 0;\r\n              arr[j + 1] += arr[j] / baseOut | 0;\r\n              arr[j] %= baseOut;\r\n            }\r\n          }\r\n        }\r\n\r\n        return arr.reverse();\r\n      }\r\n\r\n      // Convert a numeric string of baseIn to a numeric string of baseOut.\r\n      // If the caller is toString, we are converting from base 10 to baseOut.\r\n      // If the caller is BigNumber, we are converting from baseIn to base 10.\r\n      return function (str, baseIn, baseOut, sign, callerIsToString) {\r\n        var alphabet, d, e, k, r, x, xc, y,\r\n          i = str.indexOf('.'),\r\n          dp = DECIMAL_PLACES,\r\n          rm = ROUNDING_MODE;\r\n\r\n        // Non-integer.\r\n        if (i >= 0) {\r\n          k = POW_PRECISION;\r\n\r\n          // Unlimited precision.\r\n          POW_PRECISION = 0;\r\n          str = str.replace('.', '');\r\n          y = new BigNumber(baseIn);\r\n          x = y.pow(str.length - i);\r\n          POW_PRECISION = k;\r\n\r\n          // Convert str as if an integer, then restore the fraction part by dividing the\r\n          // result by its base raised to a power.\r\n\r\n          y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'),\r\n           10, baseOut, decimal);\r\n          y.e = y.c.length;\r\n        }\r\n\r\n        // Convert the number as integer.\r\n\r\n        xc = toBaseOut(str, baseIn, baseOut, callerIsToString\r\n         ? (alphabet = ALPHABET, decimal)\r\n         : (alphabet = decimal, ALPHABET));\r\n\r\n        // xc now represents str as an integer and converted to baseOut. e is the exponent.\r\n        e = k = xc.length;\r\n\r\n        // Remove trailing zeros.\r\n        for (; xc[--k] == 0; xc.pop());\r\n\r\n        // Zero?\r\n        if (!xc[0]) return alphabet.charAt(0);\r\n\r\n        // Does str represent an integer? If so, no need for the division.\r\n        if (i < 0) {\r\n          --e;\r\n        } else {\r\n          x.c = xc;\r\n          x.e = e;\r\n\r\n          // The sign is needed for correct rounding.\r\n          x.s = sign;\r\n          x = div(x, y, dp, rm, baseOut);\r\n          xc = x.c;\r\n          r = x.r;\r\n          e = x.e;\r\n        }\r\n\r\n        // xc now represents str converted to baseOut.\r\n\r\n        // THe index of the rounding digit.\r\n        d = e + dp + 1;\r\n\r\n        // The rounding digit: the digit to the right of the digit that may be rounded up.\r\n        i = xc[d];\r\n\r\n        // Look at the rounding digits and mode to determine whether to round up.\r\n\r\n        k = baseOut / 2;\r\n        r = r || d < 0 || xc[d + 1] != null;\r\n\r\n        r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n              : i > k || i == k &&(rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||\r\n               rm == (x.s < 0 ? 8 : 7));\r\n\r\n        // If the index of the rounding digit is not greater than zero, or xc represents\r\n        // zero, then the result of the base conversion is zero or, if rounding up, a value\r\n        // such as 0.00001.\r\n        if (d < 1 || !xc[0]) {\r\n\r\n          // 1^-dp or 0\r\n          str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);\r\n        } else {\r\n\r\n          // Truncate xc to the required number of decimal places.\r\n          xc.length = d;\r\n\r\n          // Round up?\r\n          if (r) {\r\n\r\n            // Rounding up may mean the previous digit has to be rounded up and so on.\r\n            for (--baseOut; ++xc[--d] > baseOut;) {\r\n              xc[d] = 0;\r\n\r\n              if (!d) {\r\n                ++e;\r\n                xc = [1].concat(xc);\r\n              }\r\n            }\r\n          }\r\n\r\n          // Determine trailing zeros.\r\n          for (k = xc.length; !xc[--k];);\r\n\r\n          // E.g. [4, 11, 15] becomes 4bf.\r\n          for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++]));\r\n\r\n          // Add leading zeros, decimal point and trailing zeros as required.\r\n          str = toFixedPoint(str, e, alphabet.charAt(0));\r\n        }\r\n\r\n        // The caller will add the sign.\r\n        return str;\r\n      };\r\n    })();\r\n\r\n\r\n    // Perform division in the specified base. Called by div and convertBase.\r\n    div = (function () {\r\n\r\n      // Assume non-zero x and k.\r\n      function multiply(x, k, base) {\r\n        var m, temp, xlo, xhi,\r\n          carry = 0,\r\n          i = x.length,\r\n          klo = k % SQRT_BASE,\r\n          khi = k / SQRT_BASE | 0;\r\n\r\n        for (x = x.slice(); i--;) {\r\n          xlo = x[i] % SQRT_BASE;\r\n          xhi = x[i] / SQRT_BASE | 0;\r\n          m = khi * xlo + xhi * klo;\r\n          temp = klo * xlo + ((m % SQRT_BASE) * SQRT_BASE) + carry;\r\n          carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;\r\n          x[i] = temp % base;\r\n        }\r\n\r\n        if (carry) x = [carry].concat(x);\r\n\r\n        return x;\r\n      }\r\n\r\n      function compare(a, b, aL, bL) {\r\n        var i, cmp;\r\n\r\n        if (aL != bL) {\r\n          cmp = aL > bL ? 1 : -1;\r\n        } else {\r\n\r\n          for (i = cmp = 0; i < aL; i++) {\r\n\r\n            if (a[i] != b[i]) {\r\n              cmp = a[i] > b[i] ? 1 : -1;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n\r\n        return cmp;\r\n      }\r\n\r\n      function subtract(a, b, aL, base) {\r\n        var i = 0;\r\n\r\n        // Subtract b from a.\r\n        for (; aL--;) {\r\n          a[aL] -= i;\r\n          i = a[aL] < b[aL] ? 1 : 0;\r\n          a[aL] = i * base + a[aL] - b[aL];\r\n        }\r\n\r\n        // Remove leading zeros.\r\n        for (; !a[0] && a.length > 1; a.splice(0, 1));\r\n      }\r\n\r\n      // x: dividend, y: divisor.\r\n      return function (x, y, dp, rm, base) {\r\n        var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,\r\n          yL, yz,\r\n          s = x.s == y.s ? 1 : -1,\r\n          xc = x.c,\r\n          yc = y.c;\r\n\r\n        // Either NaN, Infinity or 0?\r\n        if (!xc || !xc[0] || !yc || !yc[0]) {\r\n\r\n          return new BigNumber(\r\n\r\n           // Return NaN if either NaN, or both Infinity or 0.\r\n           !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :\r\n\r\n            // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.\r\n            xc && xc[0] == 0 || !yc ? s * 0 : s / 0\r\n         );\r\n        }\r\n\r\n        q = new BigNumber(s);\r\n        qc = q.c = [];\r\n        e = x.e - y.e;\r\n        s = dp + e + 1;\r\n\r\n        if (!base) {\r\n          base = BASE;\r\n          e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);\r\n          s = s / LOG_BASE | 0;\r\n        }\r\n\r\n        // Result exponent may be one less then the current value of e.\r\n        // The coefficients of the BigNumbers from convertBase may have trailing zeros.\r\n        for (i = 0; yc[i] == (xc[i] || 0); i++);\r\n\r\n        if (yc[i] > (xc[i] || 0)) e--;\r\n\r\n        if (s < 0) {\r\n          qc.push(1);\r\n          more = true;\r\n        } else {\r\n          xL = xc.length;\r\n          yL = yc.length;\r\n          i = 0;\r\n          s += 2;\r\n\r\n          // Normalise xc and yc so highest order digit of yc is >= base / 2.\r\n\r\n          n = mathfloor(base / (yc[0] + 1));\r\n\r\n          // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.\r\n          // if (n > 1 || n++ == 1 && yc[0] < base / 2) {\r\n          if (n > 1) {\r\n            yc = multiply(yc, n, base);\r\n            xc = multiply(xc, n, base);\r\n            yL = yc.length;\r\n            xL = xc.length;\r\n          }\r\n\r\n          xi = yL;\r\n          rem = xc.slice(0, yL);\r\n          remL = rem.length;\r\n\r\n          // Add zeros to make remainder as long as divisor.\r\n          for (; remL < yL; rem[remL++] = 0);\r\n          yz = yc.slice();\r\n          yz = [0].concat(yz);\r\n          yc0 = yc[0];\r\n          if (yc[1] >= base / 2) yc0++;\r\n          // Not necessary, but to prevent trial digit n > base, when using base 3.\r\n          // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;\r\n\r\n          do {\r\n            n = 0;\r\n\r\n            // Compare divisor and remainder.\r\n            cmp = compare(yc, rem, yL, remL);\r\n\r\n            // If divisor < remainder.\r\n            if (cmp < 0) {\r\n\r\n              // Calculate trial digit, n.\r\n\r\n              rem0 = rem[0];\r\n              if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\r\n\r\n              // n is how many times the divisor goes into the current remainder.\r\n              n = mathfloor(rem0 / yc0);\r\n\r\n              //  Algorithm:\r\n              //  product = divisor multiplied by trial digit (n).\r\n              //  Compare product and remainder.\r\n              //  If product is greater than remainder:\r\n              //    Subtract divisor from product, decrement trial digit.\r\n              //  Subtract product from remainder.\r\n              //  If product was less than remainder at the last compare:\r\n              //    Compare new remainder and divisor.\r\n              //    If remainder is greater than divisor:\r\n              //      Subtract divisor from remainder, increment trial digit.\r\n\r\n              if (n > 1) {\r\n\r\n                // n may be > base only when base is 3.\r\n                if (n >= base) n = base - 1;\r\n\r\n                // product = divisor * trial digit.\r\n                prod = multiply(yc, n, base);\r\n                prodL = prod.length;\r\n                remL = rem.length;\r\n\r\n                // Compare product and remainder.\r\n                // If product > remainder then trial digit n too high.\r\n                // n is 1 too high about 5% of the time, and is not known to have\r\n                // ever been more than 1 too high.\r\n                while (compare(prod, rem, prodL, remL) == 1) {\r\n                  n--;\r\n\r\n                  // Subtract divisor from product.\r\n                  subtract(prod, yL < prodL ? yz : yc, prodL, base);\r\n                  prodL = prod.length;\r\n                  cmp = 1;\r\n                }\r\n              } else {\r\n\r\n                // n is 0 or 1, cmp is -1.\r\n                // If n is 0, there is no need to compare yc and rem again below,\r\n                // so change cmp to 1 to avoid it.\r\n                // If n is 1, leave cmp as -1, so yc and rem are compared again.\r\n                if (n == 0) {\r\n\r\n                  // divisor < remainder, so n must be at least 1.\r\n                  cmp = n = 1;\r\n                }\r\n\r\n                // product = divisor\r\n                prod = yc.slice();\r\n                prodL = prod.length;\r\n              }\r\n\r\n              if (prodL < remL) prod = [0].concat(prod);\r\n\r\n              // Subtract product from remainder.\r\n              subtract(rem, prod, remL, base);\r\n              remL = rem.length;\r\n\r\n               // If product was < remainder.\r\n              if (cmp == -1) {\r\n\r\n                // Compare divisor and new remainder.\r\n                // If divisor < new remainder, subtract divisor from remainder.\r\n                // Trial digit n too low.\r\n                // n is 1 too low about 5% of the time, and very rarely 2 too low.\r\n                while (compare(yc, rem, yL, remL) < 1) {\r\n                  n++;\r\n\r\n                  // Subtract divisor from remainder.\r\n                  subtract(rem, yL < remL ? yz : yc, remL, base);\r\n                  remL = rem.length;\r\n                }\r\n              }\r\n            } else if (cmp === 0) {\r\n              n++;\r\n              rem = [0];\r\n            } // else cmp === 1 and n will be 0\r\n\r\n            // Add the next digit, n, to the result array.\r\n            qc[i++] = n;\r\n\r\n            // Update the remainder.\r\n            if (rem[0]) {\r\n              rem[remL++] = xc[xi] || 0;\r\n            } else {\r\n              rem = [xc[xi]];\r\n              remL = 1;\r\n            }\r\n          } while ((xi++ < xL || rem[0] != null) && s--);\r\n\r\n          more = rem[0] != null;\r\n\r\n          // Leading zero?\r\n          if (!qc[0]) qc.splice(0, 1);\r\n        }\r\n\r\n        if (base == BASE) {\r\n\r\n          // To calculate q.e, first get the number of digits of qc[0].\r\n          for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);\r\n\r\n          round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);\r\n\r\n        // Caller is convertBase.\r\n        } else {\r\n          q.e = e;\r\n          q.r = +more;\r\n        }\r\n\r\n        return q;\r\n      };\r\n    })();\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of BigNumber n in fixed-point or exponential\r\n     * notation rounded to the specified decimal places or significant digits.\r\n     *\r\n     * n: a BigNumber.\r\n     * i: the index of the last digit required (i.e. the digit that may be rounded up).\r\n     * rm: the rounding mode.\r\n     * id: 1 (toExponential) or 2 (toPrecision).\r\n     */\r\n    function format(n, i, rm, id) {\r\n      var c0, e, ne, len, str;\r\n\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n\r\n      if (!n.c) return n.toString();\r\n\r\n      c0 = n.c[0];\r\n      ne = n.e;\r\n\r\n      if (i == null) {\r\n        str = coeffToString(n.c);\r\n        str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS)\r\n         ? toExponential(str, ne)\r\n         : toFixedPoint(str, ne, '0');\r\n      } else {\r\n        n = round(new BigNumber(n), i, rm);\r\n\r\n        // n.e may have changed if the value was rounded up.\r\n        e = n.e;\r\n\r\n        str = coeffToString(n.c);\r\n        len = str.length;\r\n\r\n        // toPrecision returns exponential notation if the number of significant digits\r\n        // specified is less than the number of digits necessary to represent the integer\r\n        // part of the value in fixed-point notation.\r\n\r\n        // Exponential notation.\r\n        if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {\r\n\r\n          // Append zeros?\r\n          for (; len < i; str += '0', len++);\r\n          str = toExponential(str, e);\r\n\r\n        // Fixed-point notation.\r\n        } else {\r\n          i -= ne;\r\n          str = toFixedPoint(str, e, '0');\r\n\r\n          // Append zeros?\r\n          if (e + 1 > len) {\r\n            if (--i > 0) for (str += '.'; i--; str += '0');\r\n          } else {\r\n            i += e - len;\r\n            if (i > 0) {\r\n              if (e + 1 == len) str += '.';\r\n              for (; i--; str += '0');\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return n.s < 0 && c0 ? '-' + str : str;\r\n    }\r\n\r\n\r\n    // Handle BigNumber.max and BigNumber.min.\r\n    function maxOrMin(args, method) {\r\n      var n,\r\n        i = 1,\r\n        m = new BigNumber(args[0]);\r\n\r\n      for (; i < args.length; i++) {\r\n        n = new BigNumber(args[i]);\r\n\r\n        // If any number is NaN, return NaN.\r\n        if (!n.s) {\r\n          m = n;\r\n          break;\r\n        } else if (method.call(m, n)) {\r\n          m = n;\r\n        }\r\n      }\r\n\r\n      return m;\r\n    }\r\n\r\n\r\n    /*\r\n     * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.\r\n     * Called by minus, plus and times.\r\n     */\r\n    function normalise(n, c, e) {\r\n      var i = 1,\r\n        j = c.length;\r\n\r\n       // Remove trailing zeros.\r\n      for (; !c[--j]; c.pop());\r\n\r\n      // Calculate the base 10 exponent. First get the number of digits of c[0].\r\n      for (j = c[0]; j >= 10; j /= 10, i++);\r\n\r\n      // Overflow?\r\n      if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {\r\n\r\n        // Infinity.\r\n        n.c = n.e = null;\r\n\r\n      // Underflow?\r\n      } else if (e < MIN_EXP) {\r\n\r\n        // Zero.\r\n        n.c = [n.e = 0];\r\n      } else {\r\n        n.e = e;\r\n        n.c = c;\r\n      }\r\n\r\n      return n;\r\n    }\r\n\r\n\r\n    // Handle values that fail the validity test in BigNumber.\r\n    parseNumeric = (function () {\r\n      var basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i,\r\n        dotAfter = /^([^.]+)\\.$/,\r\n        dotBefore = /^\\.([^.]+)$/,\r\n        isInfinityOrNaN = /^-?(Infinity|NaN)$/,\r\n        whitespaceOrPlus = /^\\s*\\+(?=[\\w.])|^\\s+|\\s+$/g;\r\n\r\n      return function (x, str, isNum, b) {\r\n        var base,\r\n          s = isNum ? str : str.replace(whitespaceOrPlus, '');\r\n\r\n        // No exception on ±Infinity or NaN.\r\n        if (isInfinityOrNaN.test(s)) {\r\n          x.s = isNaN(s) ? null : s < 0 ? -1 : 1;\r\n        } else {\r\n          if (!isNum) {\r\n\r\n            // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i\r\n            s = s.replace(basePrefix, function (m, p1, p2) {\r\n              base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;\r\n              return !b || b == base ? p1 : m;\r\n            });\r\n\r\n            if (b) {\r\n              base = b;\r\n\r\n              // E.g. '1.' to '1', '.1' to '0.1'\r\n              s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');\r\n            }\r\n\r\n            if (str != s) return new BigNumber(s, base);\r\n          }\r\n\r\n          // '[BigNumber Error] Not a number: {n}'\r\n          // '[BigNumber Error] Not a base {b} number: {n}'\r\n          if (BigNumber.DEBUG) {\r\n            throw Error\r\n              (bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);\r\n          }\r\n\r\n          // NaN\r\n          x.s = null;\r\n        }\r\n\r\n        x.c = x.e = null;\r\n      }\r\n    })();\r\n\r\n\r\n    /*\r\n     * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.\r\n     * If r is truthy, it is known that there are more digits after the rounding digit.\r\n     */\r\n    function round(x, sd, rm, r) {\r\n      var d, i, j, k, n, ni, rd,\r\n        xc = x.c,\r\n        pows10 = POWS_TEN;\r\n\r\n      // if x is not Infinity or NaN...\r\n      if (xc) {\r\n\r\n        // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n        // n is a base 1e14 number, the value of the element of array x.c containing rd.\r\n        // ni is the index of n within x.c.\r\n        // d is the number of digits of n.\r\n        // i is the index of rd within n including leading zeros.\r\n        // j is the actual index of rd within n (if < 0, rd is a leading zero).\r\n        out: {\r\n\r\n          // Get the number of digits of the first element of xc.\r\n          for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);\r\n          i = sd - d;\r\n\r\n          // If the rounding digit is in the first element of xc...\r\n          if (i < 0) {\r\n            i += LOG_BASE;\r\n            j = sd;\r\n            n = xc[ni = 0];\r\n\r\n            // Get the rounding digit at index j of n.\r\n            rd = n / pows10[d - j - 1] % 10 | 0;\r\n          } else {\r\n            ni = mathceil((i + 1) / LOG_BASE);\r\n\r\n            if (ni >= xc.length) {\r\n\r\n              if (r) {\r\n\r\n                // Needed by sqrt.\r\n                for (; xc.length <= ni; xc.push(0));\r\n                n = rd = 0;\r\n                d = 1;\r\n                i %= LOG_BASE;\r\n                j = i - LOG_BASE + 1;\r\n              } else {\r\n                break out;\r\n              }\r\n            } else {\r\n              n = k = xc[ni];\r\n\r\n              // Get the number of digits of n.\r\n              for (d = 1; k >= 10; k /= 10, d++);\r\n\r\n              // Get the index of rd within n.\r\n              i %= LOG_BASE;\r\n\r\n              // Get the index of rd within n, adjusted for leading zeros.\r\n              // The number of leading zeros of n is given by LOG_BASE - d.\r\n              j = i - LOG_BASE + d;\r\n\r\n              // Get the rounding digit at index j of n.\r\n              rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;\r\n            }\r\n          }\r\n\r\n          r = r || sd < 0 ||\r\n\r\n          // Are there any non-zero digits after the rounding digit?\r\n          // The expression  n % pows10[d - j - 1]  returns all digits of n to the right\r\n          // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.\r\n           xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);\r\n\r\n          r = rm < 4\r\n           ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n           : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&\r\n\r\n            // Check whether the digit to the left of the rounding digit is odd.\r\n            ((i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10) & 1 ||\r\n             rm == (x.s < 0 ? 8 : 7));\r\n\r\n          if (sd < 1 || !xc[0]) {\r\n            xc.length = 0;\r\n\r\n            if (r) {\r\n\r\n              // Convert sd to decimal places.\r\n              sd -= x.e + 1;\r\n\r\n              // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n              xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];\r\n              x.e = -sd || 0;\r\n            } else {\r\n\r\n              // Zero.\r\n              xc[0] = x.e = 0;\r\n            }\r\n\r\n            return x;\r\n          }\r\n\r\n          // Remove excess digits.\r\n          if (i == 0) {\r\n            xc.length = ni;\r\n            k = 1;\r\n            ni--;\r\n          } else {\r\n            xc.length = ni + 1;\r\n            k = pows10[LOG_BASE - i];\r\n\r\n            // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n            // j > 0 means i > number of leading zeros of n.\r\n            xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;\r\n          }\r\n\r\n          // Round up?\r\n          if (r) {\r\n\r\n            for (; ;) {\r\n\r\n              // If the digit to be rounded up is in the first element of xc...\r\n              if (ni == 0) {\r\n\r\n                // i will be the length of xc[0] before k is added.\r\n                for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);\r\n                j = xc[0] += k;\r\n                for (k = 1; j >= 10; j /= 10, k++);\r\n\r\n                // if i != k the length has increased.\r\n                if (i != k) {\r\n                  x.e++;\r\n                  if (xc[0] == BASE) xc[0] = 1;\r\n                }\r\n\r\n                break;\r\n              } else {\r\n                xc[ni] += k;\r\n                if (xc[ni] != BASE) break;\r\n                xc[ni--] = 0;\r\n                k = 1;\r\n              }\r\n            }\r\n          }\r\n\r\n          // Remove trailing zeros.\r\n          for (i = xc.length; xc[--i] === 0; xc.pop());\r\n        }\r\n\r\n        // Overflow? Infinity.\r\n        if (x.e > MAX_EXP) {\r\n          x.c = x.e = null;\r\n\r\n        // Underflow? Zero.\r\n        } else if (x.e < MIN_EXP) {\r\n          x.c = [x.e = 0];\r\n        }\r\n      }\r\n\r\n      return x;\r\n    }\r\n\r\n\r\n    function valueOf(n) {\r\n      var str,\r\n        e = n.e;\r\n\r\n      if (e === null) return n.toString();\r\n\r\n      str = coeffToString(n.c);\r\n\r\n      str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n        ? toExponential(str, e)\r\n        : toFixedPoint(str, e, '0');\r\n\r\n      return n.s < 0 ? '-' + str : str;\r\n    }\r\n\r\n\r\n    // PROTOTYPE/INSTANCE METHODS\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the absolute value of this BigNumber.\r\n     */\r\n    P.absoluteValue = P.abs = function () {\r\n      var x = new BigNumber(this);\r\n      if (x.s < 0) x.s = 1;\r\n      return x;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return\r\n     *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     *   0 if they have the same value,\r\n     *   or null if the value of either is NaN.\r\n     */\r\n    P.comparedTo = function (y, b) {\r\n      return compare(this, new BigNumber(y, b));\r\n    };\r\n\r\n\r\n    /*\r\n     * If dp is undefined or null or true or false, return the number of decimal places of the\r\n     * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     *\r\n     * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [dp] {number} Decimal places: integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.decimalPlaces = P.dp = function (dp, rm) {\r\n      var c, n, v,\r\n        x = this;\r\n\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        if (rm == null) rm = ROUNDING_MODE;\r\n        else intCheck(rm, 0, 8);\r\n\r\n        return round(new BigNumber(x), dp + x.e + 1, rm);\r\n      }\r\n\r\n      if (!(c = x.c)) return null;\r\n      n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;\r\n\r\n      // Subtract the number of trailing zeros of the last number.\r\n      if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);\r\n      if (n < 0) n = 0;\r\n\r\n      return n;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n / 0 = I\r\n     *  n / N = N\r\n     *  n / I = 0\r\n     *  0 / n = 0\r\n     *  0 / 0 = N\r\n     *  0 / N = N\r\n     *  0 / I = 0\r\n     *  N / n = N\r\n     *  N / 0 = N\r\n     *  N / N = N\r\n     *  N / I = N\r\n     *  I / n = I\r\n     *  I / 0 = I\r\n     *  I / N = N\r\n     *  I / I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber divided by the value of\r\n     * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\r\n    P.dividedBy = P.div = function (y, b) {\r\n      return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the integer part of dividing the value of this\r\n     * BigNumber by the value of BigNumber(y, b).\r\n     */\r\n    P.dividedToIntegerBy = P.idiv = function (y, b) {\r\n      return div(this, new BigNumber(y, b), 0, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.\r\n     *\r\n     * If m is present, return the result modulo m.\r\n     * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.\r\n     *\r\n     * The modular power operation works efficiently when x, n, and m are integers, otherwise it\r\n     * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.\r\n     *\r\n     * n {number|string|BigNumber} The exponent. An integer.\r\n     * [m] {number|string|BigNumber} The modulus.\r\n     *\r\n     * '[BigNumber Error] Exponent not an integer: {n}'\r\n     */\r\n    P.exponentiatedBy = P.pow = function (n, m) {\r\n      var half, isModExp, i, k, more, nIsBig, nIsNeg, nIsOdd, y,\r\n        x = this;\r\n\r\n      n = new BigNumber(n);\r\n\r\n      // Allow NaN and ±Infinity, but not other non-integers.\r\n      if (n.c && !n.isInteger()) {\r\n        throw Error\r\n          (bignumberError + 'Exponent not an integer: ' + valueOf(n));\r\n      }\r\n\r\n      if (m != null) m = new BigNumber(m);\r\n\r\n      // Exponent of MAX_SAFE_INTEGER is 15.\r\n      nIsBig = n.e > 14;\r\n\r\n      // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.\r\n      if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {\r\n\r\n        // The sign of the result of pow when x is negative depends on the evenness of n.\r\n        // If +n overflows to ±Infinity, the evenness of n would be not be known.\r\n        y = new BigNumber(Math.pow(+valueOf(x), nIsBig ? 2 - isOdd(n) : +valueOf(n)));\r\n        return m ? y.mod(m) : y;\r\n      }\r\n\r\n      nIsNeg = n.s < 0;\r\n\r\n      if (m) {\r\n\r\n        // x % m returns NaN if abs(m) is zero, or m is NaN.\r\n        if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);\r\n\r\n        isModExp = !nIsNeg && x.isInteger() && m.isInteger();\r\n\r\n        if (isModExp) x = x.mod(m);\r\n\r\n      // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.\r\n      // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.\r\n      } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0\r\n        // [1, 240000000]\r\n        ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7\r\n        // [80000000000000]  [99999750000000]\r\n        : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {\r\n\r\n        // If x is negative and n is odd, k = -0, else k = 0.\r\n        k = x.s < 0 && isOdd(n) ? -0 : 0;\r\n\r\n        // If x >= 1, k = ±Infinity.\r\n        if (x.e > -1) k = 1 / k;\r\n\r\n        // If n is negative return ±0, else return ±Infinity.\r\n        return new BigNumber(nIsNeg ? 1 / k : k);\r\n\r\n      } else if (POW_PRECISION) {\r\n\r\n        // Truncating each coefficient array to a length of k after each multiplication\r\n        // equates to truncating significant digits to POW_PRECISION + [28, 41],\r\n        // i.e. there will be a minimum of 28 guard digits retained.\r\n        k = mathceil(POW_PRECISION / LOG_BASE + 2);\r\n      }\r\n\r\n      if (nIsBig) {\r\n        half = new BigNumber(0.5);\r\n        if (nIsNeg) n.s = 1;\r\n        nIsOdd = isOdd(n);\r\n      } else {\r\n        i = Math.abs(+valueOf(n));\r\n        nIsOdd = i % 2;\r\n      }\r\n\r\n      y = new BigNumber(ONE);\r\n\r\n      // Performs 54 loop iterations for n of 9007199254740991.\r\n      for (; ;) {\r\n\r\n        if (nIsOdd) {\r\n          y = y.times(x);\r\n          if (!y.c) break;\r\n\r\n          if (k) {\r\n            if (y.c.length > k) y.c.length = k;\r\n          } else if (isModExp) {\r\n            y = y.mod(m);    //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));\r\n          }\r\n        }\r\n\r\n        if (i) {\r\n          i = mathfloor(i / 2);\r\n          if (i === 0) break;\r\n          nIsOdd = i % 2;\r\n        } else {\r\n          n = n.times(half);\r\n          round(n, n.e + 1, 1);\r\n\r\n          if (n.e > 14) {\r\n            nIsOdd = isOdd(n);\r\n          } else {\r\n            i = +valueOf(n);\r\n            if (i === 0) break;\r\n            nIsOdd = i % 2;\r\n          }\r\n        }\r\n\r\n        x = x.times(x);\r\n\r\n        if (k) {\r\n          if (x.c && x.c.length > k) x.c.length = k;\r\n        } else if (isModExp) {\r\n          x = x.mod(m);    //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));\r\n        }\r\n      }\r\n\r\n      if (isModExp) return y;\r\n      if (nIsNeg) y = ONE.div(y);\r\n\r\n      return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer\r\n     * using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'\r\n     */\r\n    P.integerValue = function (rm) {\r\n      var n = new BigNumber(this);\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n      return round(n, n.e + 1, rm);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isEqualTo = P.eq = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) === 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is a finite number, otherwise return false.\r\n     */\r\n    P.isFinite = function () {\r\n      return !!this.c;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isGreaterThan = P.gt = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) > 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is greater than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\r\n    P.isGreaterThanOrEqualTo = P.gte = function (y, b) {\r\n      return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;\r\n\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is an integer, otherwise return false.\r\n     */\r\n    P.isInteger = function () {\r\n      return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isLessThan = P.lt = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) < 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is less than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\r\n    P.isLessThanOrEqualTo = P.lte = function (y, b) {\r\n      return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is NaN, otherwise return false.\r\n     */\r\n    P.isNaN = function () {\r\n      return !this.s;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is negative, otherwise return false.\r\n     */\r\n    P.isNegative = function () {\r\n      return this.s < 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is positive, otherwise return false.\r\n     */\r\n    P.isPositive = function () {\r\n      return this.s > 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is 0 or -0, otherwise return false.\r\n     */\r\n    P.isZero = function () {\r\n      return !!this.c && this.c[0] == 0;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n - 0 = n\r\n     *  n - N = N\r\n     *  n - I = -I\r\n     *  0 - n = -n\r\n     *  0 - 0 = 0\r\n     *  0 - N = N\r\n     *  0 - I = -I\r\n     *  N - n = N\r\n     *  N - 0 = N\r\n     *  N - N = N\r\n     *  N - I = N\r\n     *  I - n = I\r\n     *  I - 0 = I\r\n     *  I - N = N\r\n     *  I - I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber minus the value of\r\n     * BigNumber(y, b).\r\n     */\r\n    P.minus = function (y, b) {\r\n      var i, j, t, xLTy,\r\n        x = this,\r\n        a = x.s;\r\n\r\n      y = new BigNumber(y, b);\r\n      b = y.s;\r\n\r\n      // Either NaN?\r\n      if (!a || !b) return new BigNumber(NaN);\r\n\r\n      // Signs differ?\r\n      if (a != b) {\r\n        y.s = -b;\r\n        return x.plus(y);\r\n      }\r\n\r\n      var xe = x.e / LOG_BASE,\r\n        ye = y.e / LOG_BASE,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      if (!xe || !ye) {\r\n\r\n        // Either Infinity?\r\n        if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);\r\n\r\n        // Either zero?\r\n        if (!xc[0] || !yc[0]) {\r\n\r\n          // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n          return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :\r\n\r\n           // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\r\n           ROUNDING_MODE == 3 ? -0 : 0);\r\n        }\r\n      }\r\n\r\n      xe = bitFloor(xe);\r\n      ye = bitFloor(ye);\r\n      xc = xc.slice();\r\n\r\n      // Determine which is the bigger number.\r\n      if (a = xe - ye) {\r\n\r\n        if (xLTy = a < 0) {\r\n          a = -a;\r\n          t = xc;\r\n        } else {\r\n          ye = xe;\r\n          t = yc;\r\n        }\r\n\r\n        t.reverse();\r\n\r\n        // Prepend zeros to equalise exponents.\r\n        for (b = a; b--; t.push(0));\r\n        t.reverse();\r\n      } else {\r\n\r\n        // Exponents equal. Check digit by digit.\r\n        j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;\r\n\r\n        for (a = b = 0; b < j; b++) {\r\n\r\n          if (xc[b] != yc[b]) {\r\n            xLTy = xc[b] < yc[b];\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      // x < y? Point xc to the array of the bigger number.\r\n      if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;\r\n\r\n      b = (j = yc.length) - (i = xc.length);\r\n\r\n      // Append zeros to xc if shorter.\r\n      // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.\r\n      if (b > 0) for (; b--; xc[i++] = 0);\r\n      b = BASE - 1;\r\n\r\n      // Subtract yc from xc.\r\n      for (; j > a;) {\r\n\r\n        if (xc[--j] < yc[j]) {\r\n          for (i = j; i && !xc[--i]; xc[i] = b);\r\n          --xc[i];\r\n          xc[j] += BASE;\r\n        }\r\n\r\n        xc[j] -= yc[j];\r\n      }\r\n\r\n      // Remove leading zeros and adjust exponent accordingly.\r\n      for (; xc[0] == 0; xc.splice(0, 1), --ye);\r\n\r\n      // Zero?\r\n      if (!xc[0]) {\r\n\r\n        // Following IEEE 754 (2008) 6.3,\r\n        // n - n = +0  but  n - n = -0  when rounding towards -Infinity.\r\n        y.s = ROUNDING_MODE == 3 ? -1 : 1;\r\n        y.c = [y.e = 0];\r\n        return y;\r\n      }\r\n\r\n      // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\r\n      // for finite x and y.\r\n      return normalise(y, xc, ye);\r\n    };\r\n\r\n\r\n    /*\r\n     *   n % 0 =  N\r\n     *   n % N =  N\r\n     *   n % I =  n\r\n     *   0 % n =  0\r\n     *  -0 % n = -0\r\n     *   0 % 0 =  N\r\n     *   0 % N =  N\r\n     *   0 % I =  0\r\n     *   N % n =  N\r\n     *   N % 0 =  N\r\n     *   N % N =  N\r\n     *   N % I =  N\r\n     *   I % n =  N\r\n     *   I % 0 =  N\r\n     *   I % N =  N\r\n     *   I % I =  N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber modulo the value of\r\n     * BigNumber(y, b). The result depends on the value of MODULO_MODE.\r\n     */\r\n    P.modulo = P.mod = function (y, b) {\r\n      var q, s,\r\n        x = this;\r\n\r\n      y = new BigNumber(y, b);\r\n\r\n      // Return NaN if x is Infinity or NaN, or y is NaN or zero.\r\n      if (!x.c || !y.s || y.c && !y.c[0]) {\r\n        return new BigNumber(NaN);\r\n\r\n      // Return x if y is Infinity or x is zero.\r\n      } else if (!y.c || x.c && !x.c[0]) {\r\n        return new BigNumber(x);\r\n      }\r\n\r\n      if (MODULO_MODE == 9) {\r\n\r\n        // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n        // r = x - qy    where  0 <= r < abs(y)\r\n        s = y.s;\r\n        y.s = 1;\r\n        q = div(x, y, 0, 3);\r\n        y.s = s;\r\n        q.s *= s;\r\n      } else {\r\n        q = div(x, y, 0, MODULO_MODE);\r\n      }\r\n\r\n      y = x.minus(q.times(y));\r\n\r\n      // To match JavaScript %, ensure sign of zero is sign of dividend.\r\n      if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;\r\n\r\n      return y;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n * 0 = 0\r\n     *  n * N = N\r\n     *  n * I = I\r\n     *  0 * n = 0\r\n     *  0 * 0 = 0\r\n     *  0 * N = N\r\n     *  0 * I = N\r\n     *  N * n = N\r\n     *  N * 0 = N\r\n     *  N * N = N\r\n     *  N * I = N\r\n     *  I * n = I\r\n     *  I * 0 = N\r\n     *  I * N = N\r\n     *  I * I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value\r\n     * of BigNumber(y, b).\r\n     */\r\n    P.multipliedBy = P.times = function (y, b) {\r\n      var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,\r\n        base, sqrtBase,\r\n        x = this,\r\n        xc = x.c,\r\n        yc = (y = new BigNumber(y, b)).c;\r\n\r\n      // Either NaN, ±Infinity or ±0?\r\n      if (!xc || !yc || !xc[0] || !yc[0]) {\r\n\r\n        // Return NaN if either is NaN, or one is 0 and the other is Infinity.\r\n        if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {\r\n          y.c = y.e = y.s = null;\r\n        } else {\r\n          y.s *= x.s;\r\n\r\n          // Return ±Infinity if either is ±Infinity.\r\n          if (!xc || !yc) {\r\n            y.c = y.e = null;\r\n\r\n          // Return ±0 if either is ±0.\r\n          } else {\r\n            y.c = [0];\r\n            y.e = 0;\r\n          }\r\n        }\r\n\r\n        return y;\r\n      }\r\n\r\n      e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);\r\n      y.s *= x.s;\r\n      xcL = xc.length;\r\n      ycL = yc.length;\r\n\r\n      // Ensure xc points to longer array and xcL to its length.\r\n      if (xcL < ycL) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;\r\n\r\n      // Initialise the result array with zeros.\r\n      for (i = xcL + ycL, zc = []; i--; zc.push(0));\r\n\r\n      base = BASE;\r\n      sqrtBase = SQRT_BASE;\r\n\r\n      for (i = ycL; --i >= 0;) {\r\n        c = 0;\r\n        ylo = yc[i] % sqrtBase;\r\n        yhi = yc[i] / sqrtBase | 0;\r\n\r\n        for (k = xcL, j = i + k; j > i;) {\r\n          xlo = xc[--k] % sqrtBase;\r\n          xhi = xc[k] / sqrtBase | 0;\r\n          m = yhi * xlo + xhi * ylo;\r\n          xlo = ylo * xlo + ((m % sqrtBase) * sqrtBase) + zc[j] + c;\r\n          c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;\r\n          zc[j--] = xlo % base;\r\n        }\r\n\r\n        zc[j] = c;\r\n      }\r\n\r\n      if (c) {\r\n        ++e;\r\n      } else {\r\n        zc.splice(0, 1);\r\n      }\r\n\r\n      return normalise(y, zc, e);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber negated,\r\n     * i.e. multiplied by -1.\r\n     */\r\n    P.negated = function () {\r\n      var x = new BigNumber(this);\r\n      x.s = -x.s || null;\r\n      return x;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n + 0 = n\r\n     *  n + N = N\r\n     *  n + I = I\r\n     *  0 + n = n\r\n     *  0 + 0 = 0\r\n     *  0 + N = N\r\n     *  0 + I = I\r\n     *  N + n = N\r\n     *  N + 0 = N\r\n     *  N + N = N\r\n     *  N + I = N\r\n     *  I + n = I\r\n     *  I + 0 = I\r\n     *  I + N = N\r\n     *  I + I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber plus the value of\r\n     * BigNumber(y, b).\r\n     */\r\n    P.plus = function (y, b) {\r\n      var t,\r\n        x = this,\r\n        a = x.s;\r\n\r\n      y = new BigNumber(y, b);\r\n      b = y.s;\r\n\r\n      // Either NaN?\r\n      if (!a || !b) return new BigNumber(NaN);\r\n\r\n      // Signs differ?\r\n       if (a != b) {\r\n        y.s = -b;\r\n        return x.minus(y);\r\n      }\r\n\r\n      var xe = x.e / LOG_BASE,\r\n        ye = y.e / LOG_BASE,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      if (!xe || !ye) {\r\n\r\n        // Return ±Infinity if either ±Infinity.\r\n        if (!xc || !yc) return new BigNumber(a / 0);\r\n\r\n        // Either zero?\r\n        // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n        if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);\r\n      }\r\n\r\n      xe = bitFloor(xe);\r\n      ye = bitFloor(ye);\r\n      xc = xc.slice();\r\n\r\n      // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.\r\n      if (a = xe - ye) {\r\n        if (a > 0) {\r\n          ye = xe;\r\n          t = yc;\r\n        } else {\r\n          a = -a;\r\n          t = xc;\r\n        }\r\n\r\n        t.reverse();\r\n        for (; a--; t.push(0));\r\n        t.reverse();\r\n      }\r\n\r\n      a = xc.length;\r\n      b = yc.length;\r\n\r\n      // Point xc to the longer array, and b to the shorter length.\r\n      if (a - b < 0) t = yc, yc = xc, xc = t, b = a;\r\n\r\n      // Only start adding at yc.length - 1 as the further digits of xc can be ignored.\r\n      for (a = 0; b;) {\r\n        a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;\r\n        xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;\r\n      }\r\n\r\n      if (a) {\r\n        xc = [a].concat(xc);\r\n        ++ye;\r\n      }\r\n\r\n      // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n      // ye = MAX_EXP + 1 possible\r\n      return normalise(y, xc, ye);\r\n    };\r\n\r\n\r\n    /*\r\n     * If sd is undefined or null or true or false, return the number of significant digits of\r\n     * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     * If sd is true include integer-part trailing zeros in the count.\r\n     *\r\n     * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.\r\n     *                     boolean: whether to count integer-part trailing zeros: true or false.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\r\n    P.precision = P.sd = function (sd, rm) {\r\n      var c, n, v,\r\n        x = this;\r\n\r\n      if (sd != null && sd !== !!sd) {\r\n        intCheck(sd, 1, MAX);\r\n        if (rm == null) rm = ROUNDING_MODE;\r\n        else intCheck(rm, 0, 8);\r\n\r\n        return round(new BigNumber(x), sd, rm);\r\n      }\r\n\r\n      if (!(c = x.c)) return null;\r\n      v = c.length - 1;\r\n      n = v * LOG_BASE + 1;\r\n\r\n      if (v = c[v]) {\r\n\r\n        // Subtract the number of trailing zeros of the last element.\r\n        for (; v % 10 == 0; v /= 10, n--);\r\n\r\n        // Add the number of digits of the first element.\r\n        for (v = c[0]; v >= 10; v /= 10, n++);\r\n      }\r\n\r\n      if (sd && x.e + 1 > n) n = x.e + 1;\r\n\r\n      return n;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber shifted by k places\r\n     * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.\r\n     *\r\n     * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'\r\n     */\r\n    P.shiftedBy = function (k) {\r\n      intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);\r\n      return this.times('1e' + k);\r\n    };\r\n\r\n\r\n    /*\r\n     *  sqrt(-n) =  N\r\n     *  sqrt(N) =  N\r\n     *  sqrt(-I) =  N\r\n     *  sqrt(I) =  I\r\n     *  sqrt(0) =  0\r\n     *  sqrt(-0) = -0\r\n     *\r\n     * Return a new BigNumber whose value is the square root of the value of this BigNumber,\r\n     * rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\r\n    P.squareRoot = P.sqrt = function () {\r\n      var m, n, r, rep, t,\r\n        x = this,\r\n        c = x.c,\r\n        s = x.s,\r\n        e = x.e,\r\n        dp = DECIMAL_PLACES + 4,\r\n        half = new BigNumber('0.5');\r\n\r\n      // Negative/NaN/Infinity/zero?\r\n      if (s !== 1 || !c || !c[0]) {\r\n        return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);\r\n      }\r\n\r\n      // Initial estimate.\r\n      s = Math.sqrt(+valueOf(x));\r\n\r\n      // Math.sqrt underflow/overflow?\r\n      // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n      if (s == 0 || s == 1 / 0) {\r\n        n = coeffToString(c);\r\n        if ((n.length + e) % 2 == 0) n += '0';\r\n        s = Math.sqrt(+n);\r\n        e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n        if (s == 1 / 0) {\r\n          n = '5e' + e;\r\n        } else {\r\n          n = s.toExponential();\r\n          n = n.slice(0, n.indexOf('e') + 1) + e;\r\n        }\r\n\r\n        r = new BigNumber(n);\r\n      } else {\r\n        r = new BigNumber(s + '');\r\n      }\r\n\r\n      // Check for zero.\r\n      // r could be zero if MIN_EXP is changed after the this value was created.\r\n      // This would cause a division by zero (x/t) and hence Infinity below, which would cause\r\n      // coeffToString to throw.\r\n      if (r.c[0]) {\r\n        e = r.e;\r\n        s = e + dp;\r\n        if (s < 3) s = 0;\r\n\r\n        // Newton-Raphson iteration.\r\n        for (; ;) {\r\n          t = r;\r\n          r = half.times(t.plus(div(x, t, dp, 1)));\r\n\r\n          if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {\r\n\r\n            // The exponent of r may here be one less than the final result exponent,\r\n            // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits\r\n            // are indexed correctly.\r\n            if (r.e < e) --s;\r\n            n = n.slice(s - 3, s + 1);\r\n\r\n            // The 4th rounding digit may be in error by -1 so if the 4 rounding digits\r\n            // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the\r\n            // iteration.\r\n            if (n == '9999' || !rep && n == '4999') {\r\n\r\n              // On the first iteration only, check to see if rounding up gives the\r\n              // exact result as the nines may infinitely repeat.\r\n              if (!rep) {\r\n                round(t, t.e + DECIMAL_PLACES + 2, 0);\r\n\r\n                if (t.times(t).eq(x)) {\r\n                  r = t;\r\n                  break;\r\n                }\r\n              }\r\n\r\n              dp += 4;\r\n              s += 4;\r\n              rep = 1;\r\n            } else {\r\n\r\n              // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact\r\n              // result. If not, then there are further digits and m will be truthy.\r\n              if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n                // Truncate to the first rounding digit.\r\n                round(r, r.e + DECIMAL_PLACES + 2, 1);\r\n                m = !r.times(r).eq(x);\r\n              }\r\n\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in exponential notation and\r\n     * rounded using ROUNDING_MODE to dp fixed decimal places.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toExponential = function (dp, rm) {\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        dp++;\r\n      }\r\n      return format(this, dp, rm, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounding\r\n     * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\r\n     * but e.g. (-0.00001).toFixed(0) is '-0'.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toFixed = function (dp, rm) {\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        dp = dp + this.e + 1;\r\n      }\r\n      return format(this, dp, rm);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounded\r\n     * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties\r\n     * of the format or FORMAT object (see BigNumber.set).\r\n     *\r\n     * The formatting object may contain some or all of the properties shown below.\r\n     *\r\n     * FORMAT = {\r\n     *   prefix: '',\r\n     *   groupSize: 3,\r\n     *   secondaryGroupSize: 0,\r\n     *   groupSeparator: ',',\r\n     *   decimalSeparator: '.',\r\n     *   fractionGroupSize: 0,\r\n     *   fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n     *   suffix: ''\r\n     * };\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     * [format] {object} Formatting options. See FORMAT pbject above.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     * '[BigNumber Error] Argument not an object: {format}'\r\n     */\r\n    P.toFormat = function (dp, rm, format) {\r\n      var str,\r\n        x = this;\r\n\r\n      if (format == null) {\r\n        if (dp != null && rm && typeof rm == 'object') {\r\n          format = rm;\r\n          rm = null;\r\n        } else if (dp && typeof dp == 'object') {\r\n          format = dp;\r\n          dp = rm = null;\r\n        } else {\r\n          format = FORMAT;\r\n        }\r\n      } else if (typeof format != 'object') {\r\n        throw Error\r\n          (bignumberError + 'Argument not an object: ' + format);\r\n      }\r\n\r\n      str = x.toFixed(dp, rm);\r\n\r\n      if (x.c) {\r\n        var i,\r\n          arr = str.split('.'),\r\n          g1 = +format.groupSize,\r\n          g2 = +format.secondaryGroupSize,\r\n          groupSeparator = format.groupSeparator || '',\r\n          intPart = arr[0],\r\n          fractionPart = arr[1],\r\n          isNeg = x.s < 0,\r\n          intDigits = isNeg ? intPart.slice(1) : intPart,\r\n          len = intDigits.length;\r\n\r\n        if (g2) i = g1, g1 = g2, g2 = i, len -= i;\r\n\r\n        if (g1 > 0 && len > 0) {\r\n          i = len % g1 || g1;\r\n          intPart = intDigits.substr(0, i);\r\n          for (; i < len; i += g1) intPart += groupSeparator + intDigits.substr(i, g1);\r\n          if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);\r\n          if (isNeg) intPart = '-' + intPart;\r\n        }\r\n\r\n        str = fractionPart\r\n         ? intPart + (format.decimalSeparator || '') + ((g2 = +format.fractionGroupSize)\r\n          ? fractionPart.replace(new RegExp('\\\\d{' + g2 + '}\\\\B', 'g'),\r\n           '$&' + (format.fractionGroupSeparator || ''))\r\n          : fractionPart)\r\n         : intPart;\r\n      }\r\n\r\n      return (format.prefix || '') + str + (format.suffix || '');\r\n    };\r\n\r\n\r\n    /*\r\n     * Return an array of two BigNumbers representing the value of this BigNumber as a simple\r\n     * fraction with an integer numerator and an integer denominator.\r\n     * The denominator will be a positive non-zero value less than or equal to the specified\r\n     * maximum denominator. If a maximum denominator is not specified, the denominator will be\r\n     * the lowest value necessary to represent the number exactly.\r\n     *\r\n     * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.\r\n     *\r\n     * '[BigNumber Error] Argument {not an integer|out of range} : {md}'\r\n     */\r\n    P.toFraction = function (md) {\r\n      var d, d0, d1, d2, e, exp, n, n0, n1, q, r, s,\r\n        x = this,\r\n        xc = x.c;\r\n\r\n      if (md != null) {\r\n        n = new BigNumber(md);\r\n\r\n        // Throw if md is less than one or is not an integer, unless it is Infinity.\r\n        if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {\r\n          throw Error\r\n            (bignumberError + 'Argument ' +\r\n              (n.isInteger() ? 'out of range: ' : 'not an integer: ') + valueOf(n));\r\n        }\r\n      }\r\n\r\n      if (!xc) return new BigNumber(x);\r\n\r\n      d = new BigNumber(ONE);\r\n      n1 = d0 = new BigNumber(ONE);\r\n      d1 = n0 = new BigNumber(ONE);\r\n      s = coeffToString(xc);\r\n\r\n      // Determine initial denominator.\r\n      // d is a power of 10 and the minimum max denominator that specifies the value exactly.\r\n      e = d.e = s.length - x.e - 1;\r\n      d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];\r\n      md = !md || n.comparedTo(d) > 0 ? (e > 0 ? d : n1) : n;\r\n\r\n      exp = MAX_EXP;\r\n      MAX_EXP = 1 / 0;\r\n      n = new BigNumber(s);\r\n\r\n      // n0 = d1 = 0\r\n      n0.c[0] = 0;\r\n\r\n      for (; ;)  {\r\n        q = div(n, d, 0, 1);\r\n        d2 = d0.plus(q.times(d1));\r\n        if (d2.comparedTo(md) == 1) break;\r\n        d0 = d1;\r\n        d1 = d2;\r\n        n1 = n0.plus(q.times(d2 = n1));\r\n        n0 = d2;\r\n        d = n.minus(q.times(d2 = d));\r\n        n = d2;\r\n      }\r\n\r\n      d2 = div(md.minus(d0), d1, 0, 1);\r\n      n0 = n0.plus(d2.times(n1));\r\n      d0 = d0.plus(d2.times(d1));\r\n      n0.s = n1.s = x.s;\r\n      e = e * 2;\r\n\r\n      // Determine which fraction is closer to x, n0/d0 or n1/d1\r\n      r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(\r\n          div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];\r\n\r\n      MAX_EXP = exp;\r\n\r\n      return r;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return the value of this BigNumber converted to a number primitive.\r\n     */\r\n    P.toNumber = function () {\r\n      return +valueOf(this);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber rounded to sd significant digits\r\n     * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits\r\n     * necessary to represent the integer part of the value in fixed-point notation, then use\r\n     * exponential notation.\r\n     *\r\n     * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\r\n    P.toPrecision = function (sd, rm) {\r\n      if (sd != null) intCheck(sd, 1, MAX);\r\n      return format(this, sd, rm, 2);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in base b, or base 10 if b is\r\n     * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and\r\n     * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent\r\n     * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than\r\n     * TO_EXP_NEG, return exponential notation.\r\n     *\r\n     * [b] {number} Integer, 2 to ALPHABET.length inclusive.\r\n     *\r\n     * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n     */\r\n    P.toString = function (b) {\r\n      var str,\r\n        n = this,\r\n        s = n.s,\r\n        e = n.e;\r\n\r\n      // Infinity or NaN?\r\n      if (e === null) {\r\n        if (s) {\r\n          str = 'Infinity';\r\n          if (s < 0) str = '-' + str;\r\n        } else {\r\n          str = 'NaN';\r\n        }\r\n      } else {\r\n        if (b == null) {\r\n          str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n           ? toExponential(coeffToString(n.c), e)\r\n           : toFixedPoint(coeffToString(n.c), e, '0');\r\n        } else if (b === 10) {\r\n          n = round(new BigNumber(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);\r\n          str = toFixedPoint(coeffToString(n.c), n.e, '0');\r\n        } else {\r\n          intCheck(b, 2, ALPHABET.length, 'Base');\r\n          str = convertBase(toFixedPoint(coeffToString(n.c), e, '0'), 10, b, s, true);\r\n        }\r\n\r\n        if (s < 0 && n.c[0]) str = '-' + str;\r\n      }\r\n\r\n      return str;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return as toString, but do not accept a base argument, and include the minus sign for\r\n     * negative zero.\r\n     */\r\n    P.valueOf = P.toJSON = function () {\r\n      return valueOf(this);\r\n    };\r\n\r\n\r\n    P._isBigNumber = true;\r\n\r\n    if (configObject != null) BigNumber.set(configObject);\r\n\r\n    return BigNumber;\r\n  }\r\n\r\n\r\n  // PRIVATE HELPER FUNCTIONS\r\n\r\n  // These functions don't need access to variables,\r\n  // e.g. DECIMAL_PLACES, in the scope of the `clone` function above.\r\n\r\n\r\n  function bitFloor(n) {\r\n    var i = n | 0;\r\n    return n > 0 || n === i ? i : i - 1;\r\n  }\r\n\r\n\r\n  // Return a coefficient array as a string of base 10 digits.\r\n  function coeffToString(a) {\r\n    var s, z,\r\n      i = 1,\r\n      j = a.length,\r\n      r = a[0] + '';\r\n\r\n    for (; i < j;) {\r\n      s = a[i++] + '';\r\n      z = LOG_BASE - s.length;\r\n      for (; z--; s = '0' + s);\r\n      r += s;\r\n    }\r\n\r\n    // Determine trailing zeros.\r\n    for (j = r.length; r.charCodeAt(--j) === 48;);\r\n\r\n    return r.slice(0, j + 1 || 1);\r\n  }\r\n\r\n\r\n  // Compare the value of BigNumbers x and y.\r\n  function compare(x, y) {\r\n    var a, b,\r\n      xc = x.c,\r\n      yc = y.c,\r\n      i = x.s,\r\n      j = y.s,\r\n      k = x.e,\r\n      l = y.e;\r\n\r\n    // Either NaN?\r\n    if (!i || !j) return null;\r\n\r\n    a = xc && !xc[0];\r\n    b = yc && !yc[0];\r\n\r\n    // Either zero?\r\n    if (a || b) return a ? b ? 0 : -j : i;\r\n\r\n    // Signs differ?\r\n    if (i != j) return i;\r\n\r\n    a = i < 0;\r\n    b = k == l;\r\n\r\n    // Either Infinity?\r\n    if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;\r\n\r\n    // Compare exponents.\r\n    if (!b) return k > l ^ a ? 1 : -1;\r\n\r\n    j = (k = xc.length) < (l = yc.length) ? k : l;\r\n\r\n    // Compare digit by digit.\r\n    for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;\r\n\r\n    // Compare lengths.\r\n    return k == l ? 0 : k > l ^ a ? 1 : -1;\r\n  }\r\n\r\n\r\n  /*\r\n   * Check that n is a primitive number, an integer, and in range, otherwise throw.\r\n   */\r\n  function intCheck(n, min, max, name) {\r\n    if (n < min || n > max || n !== mathfloor(n)) {\r\n      throw Error\r\n       (bignumberError + (name || 'Argument') + (typeof n == 'number'\r\n         ? n < min || n > max ? ' out of range: ' : ' not an integer: '\r\n         : ' not a primitive number: ') + String(n));\r\n    }\r\n  }\r\n\r\n\r\n  // Assumes finite n.\r\n  function isOdd(n) {\r\n    var k = n.c.length - 1;\r\n    return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;\r\n  }\r\n\r\n\r\n  function toExponential(str, e) {\r\n    return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) +\r\n     (e < 0 ? 'e' : 'e+') + e;\r\n  }\r\n\r\n\r\n  function toFixedPoint(str, e, z) {\r\n    var len, zs;\r\n\r\n    // Negative exponent?\r\n    if (e < 0) {\r\n\r\n      // Prepend zeros.\r\n      for (zs = z + '.'; ++e; zs += z);\r\n      str = zs + str;\r\n\r\n    // Positive exponent\r\n    } else {\r\n      len = str.length;\r\n\r\n      // Append zeros.\r\n      if (++e > len) {\r\n        for (zs = z, e -= len; --e; zs += z);\r\n        str += zs;\r\n      } else if (e < len) {\r\n        str = str.slice(0, e) + '.' + str.slice(e);\r\n      }\r\n    }\r\n\r\n    return str;\r\n  }\r\n\r\n\r\n  // EXPORT\r\n\r\n\r\n  BigNumber = clone();\r\n  BigNumber['default'] = BigNumber.BigNumber = BigNumber;\r\n\r\n  // AMD.\r\n  if (typeof define == 'function' && define.amd) {\r\n    define(function () { return BigNumber; });\r\n\r\n  // Node.js and other environments that support module.exports.\r\n  } else if (typeof module != 'undefined' && module.exports) {\r\n    module.exports = BigNumber;\r\n\r\n  // Browser.\r\n  } else {\r\n    if (!globalObject) {\r\n      globalObject = typeof self != 'undefined' && self ? self : window;\r\n    }\r\n\r\n    globalObject.BigNumber = BigNumber;\r\n  }\r\n})(this);\r\n"]}