{"version":3,"sources":["../../../../node_modules/buffer-writer/test/writer-tests.js"],"names":["Writer","require","__dirname","assert","util","equalBuffers","actual","expected","spit","console","log","inspect","length","strictEqual","i","suite","testAddingInt32","int","expectedBuffer","test","subject","result","addInt32","join","addInt16","addCString","addChar","getByteLength","add","Buffer","from","addString","clear","joinedResult","flushedResult","flush","string","addHeader"],"mappings":"AAAA,IAAIA,SAASC,QAAQC,YAAY,MAApB,CAAb;;AAEA,IAAIC,SAASF,QAAQ,QAAR,CAAb;AACA,IAAIG,OAAOH,QAAQ,MAAR,CAAX;;AAEAE,OAAOE,YAAP,GAAsB,UAAUC,MAAV,EAAkBC,QAAlB,EAA4B;AAChD,MAAIC,OAAO,UAAUF,MAAV,EAAkBC,QAAlB,EAA4B;AACrCE,YAAQC,GAAR,CAAY,EAAZ;AACAD,YAAQC,GAAR,CAAY,YAAYN,KAAKO,OAAL,CAAaL,MAAb,CAAxB;AACAG,YAAQC,GAAR,CAAY,YAAYN,KAAKO,OAAL,CAAaJ,QAAb,CAAxB;AACAE,YAAQC,GAAR,CAAY,EAAZ;AACD,GALD;AAMA,MAAIJ,OAAOM,MAAP,IAAiBL,SAASK,MAA9B,EAAsC;AACpCJ,SAAKF,MAAL,EAAaC,QAAb;AACAJ,WAAOU,WAAP,CAAmBP,OAAOM,MAA1B,EAAkCL,SAASK,MAA3C;AACD;AACD,OAAK,IAAIE,IAAI,CAAb,EAAgBA,IAAIR,OAAOM,MAA3B,EAAmCE,GAAnC,EAAwC;AACtC,QAAIR,OAAOQ,CAAP,KAAaP,SAASO,CAAT,CAAjB,EAA8B;AAC5BN,WAAKF,MAAL,EAAaC,QAAb;AACD;AACDJ,WAAOU,WAAP,CAAmBP,OAAOQ,CAAP,CAAnB,EAA8BP,SAASO,CAAT,CAA9B;AACD;AACF,CAjBD;;AAmBAC,MAAM,cAAN,EAAsB,YAAY;AAChC,MAAIC,kBAAkB,UAAUC,GAAV,EAAeC,cAAf,EAA+B;AACnDC,SAAK,YAAYF,GAAjB,EAAsB,YAAY;AAChC,UAAIG,UAAU,IAAIpB,MAAJ,EAAd;AACA,UAAIqB,SAASD,QAAQE,QAAR,CAAiBL,GAAjB,EAAsBM,IAAtB,EAAb;AACApB,aAAOE,YAAP,CAAoBgB,MAApB,EAA4BH,cAA5B;AACD,KAJD;AAKD,GAND;;AAQAF,kBAAgB,CAAhB,EAAmB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAAnB;AACAA,kBAAgB,CAAhB,EAAmB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAAnB;AACAA,kBAAgB,GAAhB,EAAqB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAArB;AACAG,OAAK,sBAAL,EAA6B,YAAY;AACvC;AACA,WAAO,KAAP;AACD,GAHD;;AAKAA,OAAK,yBAAL,EAAgC,YAAY;AAC1C,QAAIC,UAAU,IAAIpB,MAAJ,EAAd;AACA,QAAIqB,SAASD,QAAQE,QAAR,CAAiB,CAAjB,EAAoBA,QAApB,CAA6B,EAA7B,EAAiCA,QAAjC,CAA0C,CAA1C,EAA6CC,IAA7C,EAAb;AACApB,WAAOE,YAAP,CAAoBgB,MAApB,EAA4B,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,IAAtB,EAA4B,CAA5B,EAA+B,CAA/B,EAAkC,CAAlC,EAAqC,CAArC,CAA5B;AACD,GAJD;;AAMAN,QAAM,6BAAN,EAAqC,YAAY;AAC/CI,SAAK,sCAAL,EAA6C,YAAY;AACvD,UAAIC,UAAU,IAAIpB,MAAJ,CAAW,EAAX,CAAd;AACAoB,cAAQE,QAAR,CAAiB,CAAjB,EAAoBA,QAApB,CAA6B,CAA7B,EAAgCA,QAAhC,CAAyC,CAAzC;AACAnB,aAAOE,YAAP,CAAoBe,QAAQG,IAAR,EAApB,EAAoC,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,EAA4B,CAA5B,EAA+B,CAA/B,EAAkC,CAAlC,CAApC;AACD,KAJD;AAKD,GAND;AAOD,CA9BD;;AAgCAR,MAAM,OAAN,EAAe,YAAY;AACzBI,OAAK,UAAL,EAAiB,YAAY;AAC3B,QAAIC,UAAU,IAAIpB,MAAJ,EAAd;AACA,QAAIqB,SAASD,QAAQI,QAAR,CAAiB,CAAjB,EAAoBD,IAApB,EAAb;AACApB,WAAOE,YAAP,CAAoBgB,MAApB,EAA4B,CAAC,CAAD,EAAI,CAAJ,CAA5B;AACD,GAJD;;AAMAF,OAAK,YAAL,EAAmB,YAAY;AAC7B,QAAIC,UAAU,IAAIpB,MAAJ,EAAd;AACA,QAAIqB,SAASD,QAAQI,QAAR,CAAiB,GAAjB,EAAsBD,IAAtB,EAAb;AACApB,WAAOE,YAAP,CAAoBgB,MAApB,EAA4B,CAAC,CAAD,EAAI,IAAJ,CAA5B;AACD,GAJD;;AAMAF,OAAK,aAAL,EAAoB,YAAY;AAC9B,QAAIC,UAAU,IAAIpB,MAAJ,EAAd;AACA,QAAIqB,SAASD,QAAQI,QAAR,CAAiB,CAAjB,EAAoBA,QAApB,CAA6B,CAA7B,EAAgCA,QAAhC,CAAyC,CAAzC,EAA4CD,IAA5C,EAAb;AACApB,WAAOE,YAAP,CAAoBgB,MAApB,EAA4B,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,CAA5B;AACD,GAJD;;AAMAF,OAAK,qCAAL,EAA4C,YAAY;AACtD,QAAIC,UAAU,IAAIpB,MAAJ,CAAW,CAAX,CAAd;AACA,QAAIqB,SAASD,QAAQI,QAAR,CAAiB,CAAjB,EAAoBA,QAApB,CAA6B,CAA7B,EAAgCD,IAAhC,EAAb;AACApB,WAAOE,YAAP,CAAoBgB,MAApB,EAA4B,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAA5B;AACD,GAJD;AAMD,CAzBD;;AA2BAN,MAAM,SAAN,EAAiB,YAAY;AAC3BI,OAAK,sBAAL,EAA6B,YAAY;AACvC,QAAIC,UAAU,IAAIpB,MAAJ,EAAd;AACA,QAAIqB,SAASD,QAAQK,UAAR,GAAqBF,IAArB,EAAb;AACApB,WAAOE,YAAP,CAAoBgB,MAApB,EAA4B,CAAC,CAAD,CAA5B;AACD,GAJD;;AAMAF,OAAK,2BAAL,EAAkC,YAAY;AAC5C,QAAIC,UAAU,IAAIpB,MAAJ,EAAd;AACA,QAAIqB,SAASD,QAAQK,UAAR,CAAmB,EAAnB,EAAuBA,UAAvB,CAAkC,EAAlC,EAAsCF,IAAtC,EAAb;AACApB,WAAOE,YAAP,CAAoBgB,MAApB,EAA4B,CAAC,CAAD,EAAI,CAAJ,CAA5B;AACD,GAJD;;AAOAF,OAAK,0BAAL,EAAiC,YAAY;AAC3C,QAAIC,UAAU,IAAIpB,MAAJ,EAAd;AACA,QAAIqB,SAASD,QAAQK,UAAR,CAAmB,KAAnB,EAA0BF,IAA1B,EAAb;AACApB,WAAOE,YAAP,CAAoBgB,MAApB,EAA4B,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,CAAb,CAA5B;AACD,GAJD;;AAMAF,OAAK,wBAAL,EAA+B,YAAY;AACzC,QAAIC,UAAU,IAAIpB,MAAJ,CAAW,CAAX,CAAd;AACA,QAAIqB,SAASD,QAAQK,UAAR,CAAmB,KAAnB,EAA0BF,IAA1B,EAAb;AACApB,WAAOE,YAAP,CAAoBgB,MAApB,EAA4B,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,CAAb,CAA5B;AACD,GAJD;;AAMAF,OAAK,0BAAL,EAAiC,YAAY;AAC3C,QAAIC,UAAU,IAAIpB,MAAJ,EAAd;AACA,QAAIqB,SAASD,QAAQK,UAAR,CAAmB,GAAnB,EAAwBA,UAAxB,CAAmC,GAAnC,EAAwCF,IAAxC,EAAb;AACApB,WAAOE,YAAP,CAAoBgB,MAApB,EAA4B,CAAC,EAAD,EAAK,CAAL,EAAQ,EAAR,EAAY,CAAZ,CAA5B;AACD,GAJD;AAMD,CAhCD;;AAkCAF,KAAK,aAAL,EAAoB,YAAY;AAC9B,MAAIC,UAAU,IAAIpB,MAAJ,CAAW,CAAX,CAAd;AACA,MAAIqB,SAASD,QAAQM,OAAR,CAAgB,GAAhB,EAAqBA,OAArB,CAA6B,GAA7B,EAAkCA,OAAlC,CAA0C,GAA1C,EAA+CH,IAA/C,EAAb;AACApB,SAAOE,YAAP,CAAoBgB,MAApB,EAA4B,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,CAA5B;AACD,CAJD;;AAMAF,KAAK,0BAAL,EAAiC,YAAY;AAC3C,MAAIC,UAAU,IAAIpB,MAAJ,CAAW,CAAX,CAAd;AACAG,SAAOU,WAAP,CAAmBO,QAAQO,aAAR,EAAnB,EAA4C,CAA5C;AACAP,UAAQE,QAAR,CAAiB,CAAjB;AACAnB,SAAOU,WAAP,CAAmBO,QAAQO,aAAR,EAAnB,EAA4C,CAA5C;AACAP,UAAQK,UAAR,CAAmB,GAAnB;AACAtB,SAAOU,WAAP,CAAmBO,QAAQO,aAAR,EAAnB,EAA4C,CAA5C;AACD,CAPD;;AASAR,KAAK,qCAAL,EAA4C,YAAY;AACtD,MAAIC,UAAU,IAAIpB,MAAJ,CAAW,CAAX,CAAd;AACAoB,UAAQK,UAAR,CAAmB,KAAnB;AACA,MAAIJ,SAASD,QAAQQ,GAAR,CAAYC,OAAOC,IAAP,CAAY,KAAZ,CAAZ,EAAgCP,IAAhC,EAAb;AACApB,SAAOE,YAAP,CAAoBgB,MAApB,EAA4B,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,CAAb,EAAgB,IAAhB,EAAsB,IAAtB,EAA4B,IAA5B,CAA5B;AACD,CALD;;AAOAN,MAAM,yBAAN,EAAiC,YAAY;AAC3C,MAAIK,UAAU,IAAIpB,MAAJ,CAAW,CAAX,CAAd;AACA,MAAIqB,SAASD,QAAQW,SAAR,CAAkB,GAAlB,EAAuBR,IAAvB,EAAb;AACApB,SAAOE,YAAP,CAAoBgB,MAApB,EAA4B,CAAC,EAAD,CAA5B;AACAF,OAAK,uBAAL,EAA8B,YAAY;AACxC,QAAIE,SAASD,QAAQK,UAAR,CAAmB,GAAnB,EAAwBF,IAAxB,EAAb;AACApB,WAAOE,YAAP,CAAoBgB,MAApB,EAA4B,CAAC,EAAD,EAAK,EAAL,EAAS,CAAT,CAA5B;AACD,GAHD;AAIAF,OAAK,YAAL,EAAmB,YAAY;AAC7B,QAAIE,SAASD,QAAQW,SAAR,CAAkB,IAAlB,EAAwBR,IAAxB,EAAb;AACApB,WAAOE,YAAP,CAAoBgB,MAApB,EAA4B,CAAC,EAAD,EAAK,EAAL,EAAS,CAAT,EAAY,EAAZ,EAAgB,EAAhB,CAA5B;AACD,GAHD;AAID,CAZD;;AAeAN,MAAM,UAAN,EAAkB,YAAY;AAC5B,MAAIK,UAAU,IAAIpB,MAAJ,EAAd;AACAoB,UAAQK,UAAR,CAAmB,QAAnB;AACAL,UAAQE,QAAR,CAAiB,KAAjB;AACAH,OAAK,QAAL,EAAe,YAAY;AACzBC,YAAQY,KAAR;AACA7B,WAAOE,YAAP,CAAoBe,QAAQG,IAAR,EAApB,EAAoC,EAApC;AACD,GAHD;AAIAJ,OAAK,cAAL,EAAqB,YAAY;AAC/B,QAAIc,eAAeb,QAAQK,UAAR,CAAmB,GAAnB,EAAwBH,QAAxB,CAAiC,CAAjC,EAAoCE,QAApC,CAA6C,CAA7C,EAAgDD,IAAhD,EAAnB;AACApB,WAAOE,YAAP,CAAoB4B,YAApB,EAAkC,CAAC,EAAD,EAAK,CAAL,EAAQ,CAAR,EAAW,CAAX,EAAc,CAAd,EAAiB,CAAjB,EAAoB,CAApB,EAAuB,CAAvB,CAAlC;AACD,GAHD;AAIAd,OAAK,gBAAL,EAAuB,YAAY;AACjC,QAAIe,gBAAgBd,QAAQe,KAAR,EAApB;AACAhC,WAAOE,YAAP,CAAoB6B,aAApB,EAAmC,CAAC,EAAD,EAAK,CAAL,EAAQ,CAAR,EAAW,CAAX,EAAc,CAAd,EAAiB,CAAjB,EAAoB,CAApB,EAAuB,CAAvB,CAAnC;AACD,GAHD;AAIAf,OAAK,mBAAL,EAA0B,YAAY;AACpChB,WAAOE,YAAP,CAAoBe,QAAQG,IAAR,EAApB,EAAoC,EAApC;AACApB,WAAOE,YAAP,CAAoBe,QAAQe,KAAR,EAApB,EAAqC,EAArC;AACD,GAHD;AAID,CApBD;;AAsBAhB,KAAK,yBAAL,EAAgC,YAAY;AAC1C,MAAIC,UAAU,IAAIpB,MAAJ,CAAW,CAAX,CAAd;AACA,MAAIoC,SAAS,UAAb;AACA,MAAIf,SAASD,QAAQK,UAAR,CAAmBW,MAAnB,EAA2BD,KAA3B,EAAb;AACAhC,SAAOE,YAAP,CAAoBgB,MAApB,EAA4B,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB,EAA6B,EAA7B,EAAiC,CAAjC,CAA5B;AACD,CALD;;AAOAN,MAAM,OAAN,EAAe,YAAY;AACzBI,OAAK,sCAAL,EAA6C,YAAY;AACvD,QAAIC,UAAU,IAAIpB,MAAJ,CAAW,CAAX,CAAd;AACA,QAAIqB,SAASD,QAAQK,UAAR,CAAmB,GAAnB,EAAwBU,KAAxB,CAA8B,IAA9B,CAAb;AACAhC,WAAOE,YAAP,CAAoBgB,MAApB,EAA4B,CAAC,IAAD,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,EAAnB,EAAuB,CAAvB,CAA5B;AACD,GAJD;;AAMAF,OAAK,0CAAL,EAAiD,YAAY;AAC3D,QAAIC,UAAU,IAAIpB,MAAJ,CAAW,EAAX,EAAeyB,UAAf,CAA0B,GAA1B,CAAd;AACA,QAAIQ,eAAeb,QAAQG,IAAR,CAAa,IAAb,CAAnB;AACA,QAAIF,SAASD,QAAQe,KAAR,CAAc,IAAd,CAAb;AACAhC,WAAOE,YAAP,CAAoBgB,MAApB,EAA4B,CAAC,IAAD,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,EAAnB,EAAuB,CAAvB,CAA5B;AACD,GALD;;AAOAF,OAAK,yDAAL,EAAgE,YAAY;AAC1E,QAAIE,SAAS,IAAIrB,MAAJ,CAAW,CAAX,EAAcyB,UAAd,CAAyB,UAAzB,EAAqCU,KAArC,CAA2C,IAA3C,CAAb;AACAhC,WAAOE,YAAP,CAAoBgB,MAApB,EAA4B,CAAC,IAAD,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,IAAhB,EAAsB,EAAtB,EAA0B,EAA1B,EAA8B,EAA9B,EAAkC,EAAlC,EAAsC,EAAtC,EAA0C,EAA1C,EAA8C,EAA9C,EAAkD,EAAlD,EAAsD,CAAtD,CAA5B;AACD,GAHD;AAID,CAlBD;;AAoBAN,MAAM,QAAN,EAAgB,YAAY;AAC1BI,OAAK,iCAAL,EAAwC,YAAY;AAClD,QAAIC,UAAU,IAAIpB,MAAJ,CAAW,EAAX,EAAeyB,UAAf,CAA0B,GAA1B,CAAd;AACAL,YAAQiB,SAAR,CAAkB,IAAlB;AACAjB,YAAQK,UAAR,CAAmB,IAAnB;AACAL,YAAQiB,SAAR,CAAkB,IAAlB;AACAjB,YAAQK,UAAR,CAAmB,GAAnB;AACA,QAAIJ,SAASD,QAAQe,KAAR,CAAc,IAAd,CAAb;AACAhC,WAAOE,YAAP,CAAoBgB,MAApB,EAA4B,CAAC,IAAD,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,EAAnB,EAAuB,CAAvB,EAA0B,IAA1B,EAAgC,CAAhC,EAAmC,CAAnC,EAAsC,CAAtC,EAAyC,CAAzC,EAA4C,EAA5C,EAAgD,EAAhD,EAAoD,CAApD,EAAuD,IAAvD,EAA6D,CAA7D,EAAgE,CAAhE,EAAmE,CAAnE,EAAsE,CAAtE,EAAyE,EAAzE,EAA6E,CAA7E,CAA5B;AACD,GARD;AASD,CAVD","file":"writer-tests.js","sourcesContent":["var Writer = require(__dirname + \"/../\");\n\nvar assert = require('assert');\nvar util = require('util');\n\nassert.equalBuffers = function (actual, expected) {\n  var spit = function (actual, expected) {\n    console.log(\"\");\n    console.log(\"actual \" + util.inspect(actual));\n    console.log(\"expect \" + util.inspect(expected));\n    console.log(\"\");\n  };\n  if (actual.length != expected.length) {\n    spit(actual, expected);\n    assert.strictEqual(actual.length, expected.length);\n  }\n  for (var i = 0; i < actual.length; i++) {\n    if (actual[i] != expected[i]) {\n      spit(actual, expected);\n    }\n    assert.strictEqual(actual[i], expected[i]);\n  }\n};\n\nsuite('adding int32', function () {\n  var testAddingInt32 = function (int, expectedBuffer) {\n    test('writes ' + int, function () {\n      var subject = new Writer();\n      var result = subject.addInt32(int).join();\n      assert.equalBuffers(result, expectedBuffer);\n    });\n  };\n\n  testAddingInt32(0, [0, 0, 0, 0]);\n  testAddingInt32(1, [0, 0, 0, 1]);\n  testAddingInt32(256, [0, 0, 1, 0]);\n  test('writes largest int32', function () {\n    //todo need to find largest int32 when I have internet access\n    return false;\n  });\n\n  test('writing multiple int32s', function () {\n    var subject = new Writer();\n    var result = subject.addInt32(1).addInt32(10).addInt32(0).join();\n    assert.equalBuffers(result, [0, 0, 0, 1, 0, 0, 0, 0x0a, 0, 0, 0, 0]);\n  });\n\n  suite('having to resize the buffer', function () {\n    test('after resize correct result returned', function () {\n      var subject = new Writer(10);\n      subject.addInt32(1).addInt32(1).addInt32(1);\n      assert.equalBuffers(subject.join(), [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1]);\n    });\n  });\n});\n\nsuite('int16', function () {\n  test('writes 0', function () {\n    var subject = new Writer();\n    var result = subject.addInt16(0).join();\n    assert.equalBuffers(result, [0, 0]);\n  });\n\n  test('writes 400', function () {\n    var subject = new Writer();\n    var result = subject.addInt16(400).join();\n    assert.equalBuffers(result, [1, 0x90]);\n  });\n\n  test('writes many', function () {\n    var subject = new Writer();\n    var result = subject.addInt16(0).addInt16(1).addInt16(2).join();\n    assert.equalBuffers(result, [0, 0, 0, 1, 0, 2]);\n  });\n\n  test('resizes if internal buffer fills up', function () {\n    var subject = new Writer(3);\n    var result = subject.addInt16(2).addInt16(3).join();\n    assert.equalBuffers(result, [0, 2, 0, 3]);\n  });\n\n});\n\nsuite('cString', function () {\n  test('writes empty cstring', function () {\n    var subject = new Writer();\n    var result = subject.addCString().join();\n    assert.equalBuffers(result, [0]);\n  });\n\n  test('writes two empty cstrings', function () {\n    var subject = new Writer();\n    var result = subject.addCString(\"\").addCString(\"\").join();\n    assert.equalBuffers(result, [0, 0]);\n  });\n\n\n  test('writes non-empty cstring', function () {\n    var subject = new Writer();\n    var result = subject.addCString(\"!!!\").join();\n    assert.equalBuffers(result, [33, 33, 33, 0]);\n  });\n\n  test('resizes if reached end', function () {\n    var subject = new Writer(3);\n    var result = subject.addCString(\"!!!\").join();\n    assert.equalBuffers(result, [33, 33, 33, 0]);\n  });\n\n  test('writes multiple cstrings', function () {\n    var subject = new Writer();\n    var result = subject.addCString(\"!\").addCString(\"!\").join();\n    assert.equalBuffers(result, [33, 0, 33, 0]);\n  });\n\n});\n\ntest('writes char', function () {\n  var subject = new Writer(2);\n  var result = subject.addChar('a').addChar('b').addChar('c').join();\n  assert.equalBuffers(result, [0x61, 0x62, 0x63]);\n});\n\ntest('gets correct byte length', function () {\n  var subject = new Writer(5);\n  assert.strictEqual(subject.getByteLength(), 0);\n  subject.addInt32(0);\n  assert.strictEqual(subject.getByteLength(), 4);\n  subject.addCString(\"!\");\n  assert.strictEqual(subject.getByteLength(), 6);\n});\n\ntest('can add arbitrary buffer to the end', function () {\n  var subject = new Writer(4);\n  subject.addCString(\"!!!\")\n  var result = subject.add(Buffer.from(\"@@@\")).join();\n  assert.equalBuffers(result, [33, 33, 33, 0, 0x40, 0x40, 0x40]);\n});\n\nsuite('can write normal string', function () {\n  var subject = new Writer(4);\n  var result = subject.addString(\"!\").join();\n  assert.equalBuffers(result, [33]);\n  test('can write cString too', function () {\n    var result = subject.addCString(\"!\").join();\n    assert.equalBuffers(result, [33, 33, 0]);\n  });\n  test('can resize', function () {\n    var result = subject.addString(\"!!\").join();\n    assert.equalBuffers(result, [33, 33, 0, 33, 33]);\n  });\n});\n\n\nsuite('clearing', function () {\n  var subject = new Writer();\n  subject.addCString(\"@!!#!#\");\n  subject.addInt32(10401);\n  test('clears', function () {\n    subject.clear();\n    assert.equalBuffers(subject.join(), []);\n  });\n  test('writing more', function () {\n    var joinedResult = subject.addCString(\"!\").addInt32(9).addInt16(2).join();\n    assert.equalBuffers(joinedResult, [33, 0, 0, 0, 0, 9, 0, 2]);\n  });\n  test('returns result', function () {\n    var flushedResult = subject.flush();\n    assert.equalBuffers(flushedResult, [33, 0, 0, 0, 0, 9, 0, 2])\n  });\n  test('clears the writer', function () {\n    assert.equalBuffers(subject.join(), [])\n    assert.equalBuffers(subject.flush(), [])\n  });\n});\n\ntest(\"resizing to much larger\", function () {\n  var subject = new Writer(2);\n  var string = \"!!!!!!!!\";\n  var result = subject.addCString(string).flush();\n  assert.equalBuffers(result, [33, 33, 33, 33, 33, 33, 33, 33, 0]);\n});\n\nsuite(\"flush\", function () {\n  test('added as a hex code to a full writer', function () {\n    var subject = new Writer(2);\n    var result = subject.addCString(\"!\").flush(0x50);\n    assert.equalBuffers(result, [0x50, 0, 0, 0, 6, 33, 0]);\n  });\n\n  test('added as a hex code to a non-full writer', function () {\n    var subject = new Writer(10).addCString(\"!\");\n    var joinedResult = subject.join(0x50);\n    var result = subject.flush(0x50);\n    assert.equalBuffers(result, [0x50, 0, 0, 0, 6, 33, 0]);\n  });\n\n  test('added as a hex code to a buffer which requires resizing', function () {\n    var result = new Writer(2).addCString(\"!!!!!!!!\").flush(0x50);\n    assert.equalBuffers(result, [0x50, 0, 0, 0, 0x0D, 33, 33, 33, 33, 33, 33, 33, 33, 0]);\n  });\n});\n\nsuite(\"header\", function () {\n  test('adding two packets with headers', function () {\n    var subject = new Writer(10).addCString(\"!\");\n    subject.addHeader(0x50);\n    subject.addCString(\"!!\");\n    subject.addHeader(0x40);\n    subject.addCString(\"!\");\n    var result = subject.flush(0x10);\n    assert.equalBuffers(result, [0x50, 0, 0, 0, 6, 33, 0, 0x40, 0, 0, 0, 7, 33, 33, 0, 0x10, 0, 0, 0, 6, 33, 0]);\n  });\n});\n\n\n\n\n"]}