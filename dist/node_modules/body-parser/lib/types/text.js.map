{"version":3,"sources":["../../../../../node_modules/body-parser/lib/types/text.js"],"names":["bytes","require","contentType","debug","read","typeis","module","exports","text","options","opts","defaultCharset","inflate","limit","parse","type","verify","TypeError","shouldParse","typeChecker","buf","textParser","req","res","next","_body","body","hasBody","headers","charset","getCharset","encoding","parameters","toLowerCase","e","undefined","checkType","Boolean"],"mappings":"AAAA;;;;;;AAMA;;AAEA;;;;AAIA,IAAIA,QAAQC,QAAQ,OAAR,CAAZ;AACA,IAAIC,cAAcD,QAAQ,cAAR,CAAlB;AACA,IAAIE,QAAQF,QAAQ,OAAR,EAAiB,kBAAjB,CAAZ;AACA,IAAIG,OAAOH,QAAQ,SAAR,CAAX;AACA,IAAII,SAASJ,QAAQ,SAAR,CAAb;;AAEA;;;;AAIAK,OAAOC,OAAP,GAAiBC,IAAjB;;AAEA;;;;;;;;AAQA,SAASA,IAAT,CAAeC,OAAf,EAAwB;AACtB,MAAIC,OAAOD,WAAW,EAAtB;;AAEA,MAAIE,iBAAiBD,KAAKC,cAAL,IAAuB,OAA5C;AACA,MAAIC,UAAUF,KAAKE,OAAL,KAAiB,KAA/B;AACA,MAAIC,QAAQ,OAAOH,KAAKG,KAAZ,KAAsB,QAAtB,GACRb,MAAMc,KAAN,CAAYJ,KAAKG,KAAL,IAAc,OAA1B,CADQ,GAERH,KAAKG,KAFT;AAGA,MAAIE,OAAOL,KAAKK,IAAL,IAAa,YAAxB;AACA,MAAIC,SAASN,KAAKM,MAAL,IAAe,KAA5B;;AAEA,MAAIA,WAAW,KAAX,IAAoB,OAAOA,MAAP,KAAkB,UAA1C,EAAsD;AACpD,UAAM,IAAIC,SAAJ,CAAc,gCAAd,CAAN;AACD;;AAED;AACA,MAAIC,cAAc,OAAOH,IAAP,KAAgB,UAAhB,GACdI,YAAYJ,IAAZ,CADc,GAEdA,IAFJ;;AAIA,WAASD,KAAT,CAAgBM,GAAhB,EAAqB;AACnB,WAAOA,GAAP;AACD;;AAED,SAAO,SAASC,UAAT,CAAqBC,GAArB,EAA0BC,GAA1B,EAA+BC,IAA/B,EAAqC;AAC1C,QAAIF,IAAIG,KAAR,EAAe;AACbtB,YAAM,qBAAN;AACAqB;AACA;AACD;;AAEDF,QAAII,IAAJ,GAAWJ,IAAII,IAAJ,IAAY,EAAvB;;AAEA;AACA,QAAI,CAACrB,OAAOsB,OAAP,CAAeL,GAAf,CAAL,EAA0B;AACxBnB,YAAM,iBAAN;AACAqB;AACA;AACD;;AAEDrB,UAAM,iBAAN,EAAyBmB,IAAIM,OAAJ,CAAY,cAAZ,CAAzB;;AAEA;AACA,QAAI,CAACV,YAAYI,GAAZ,CAAL,EAAuB;AACrBnB,YAAM,cAAN;AACAqB;AACA;AACD;;AAED;AACA,QAAIK,UAAUC,WAAWR,GAAX,KAAmBX,cAAjC;;AAEA;AACAP,SAAKkB,GAAL,EAAUC,GAAV,EAAeC,IAAf,EAAqBV,KAArB,EAA4BX,KAA5B,EAAmC;AACjC4B,gBAAUF,OADuB;AAEjCjB,eAASA,OAFwB;AAGjCC,aAAOA,KAH0B;AAIjCG,cAAQA;AAJyB,KAAnC;AAMD,GAnCD;AAoCD;;AAED;;;;;;;AAOA,SAASc,UAAT,CAAqBR,GAArB,EAA0B;AACxB,MAAI;AACF,WAAO,CAACpB,YAAYY,KAAZ,CAAkBQ,GAAlB,EAAuBU,UAAvB,CAAkCH,OAAlC,IAA6C,EAA9C,EAAkDI,WAAlD,EAAP;AACD,GAFD,CAEE,OAAOC,CAAP,EAAU;AACV,WAAOC,SAAP;AACD;AACF;;AAED;;;;;;;AAOA,SAAShB,WAAT,CAAsBJ,IAAtB,EAA4B;AAC1B,SAAO,SAASqB,SAAT,CAAoBd,GAApB,EAAyB;AAC9B,WAAOe,QAAQhC,OAAOiB,GAAP,EAAYP,IAAZ,CAAR,CAAP;AACD,GAFD;AAGD","file":"text.js","sourcesContent":["/*!\n * body-parser\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * Module dependencies.\n */\n\nvar bytes = require('bytes')\nvar contentType = require('content-type')\nvar debug = require('debug')('body-parser:text')\nvar read = require('../read')\nvar typeis = require('type-is')\n\n/**\n * Module exports.\n */\n\nmodule.exports = text\n\n/**\n * Create a middleware to parse text bodies.\n *\n * @param {object} [options]\n * @return {function}\n * @api public\n */\n\nfunction text (options) {\n  var opts = options || {}\n\n  var defaultCharset = opts.defaultCharset || 'utf-8'\n  var inflate = opts.inflate !== false\n  var limit = typeof opts.limit !== 'number'\n    ? bytes.parse(opts.limit || '100kb')\n    : opts.limit\n  var type = opts.type || 'text/plain'\n  var verify = opts.verify || false\n\n  if (verify !== false && typeof verify !== 'function') {\n    throw new TypeError('option verify must be function')\n  }\n\n  // create the appropriate type checking function\n  var shouldParse = typeof type !== 'function'\n    ? typeChecker(type)\n    : type\n\n  function parse (buf) {\n    return buf\n  }\n\n  return function textParser (req, res, next) {\n    if (req._body) {\n      debug('body already parsed')\n      next()\n      return\n    }\n\n    req.body = req.body || {}\n\n    // skip requests without bodies\n    if (!typeis.hasBody(req)) {\n      debug('skip empty body')\n      next()\n      return\n    }\n\n    debug('content-type %j', req.headers['content-type'])\n\n    // determine if request should be parsed\n    if (!shouldParse(req)) {\n      debug('skip parsing')\n      next()\n      return\n    }\n\n    // get charset\n    var charset = getCharset(req) || defaultCharset\n\n    // read\n    read(req, res, next, parse, debug, {\n      encoding: charset,\n      inflate: inflate,\n      limit: limit,\n      verify: verify\n    })\n  }\n}\n\n/**\n * Get the charset of a request.\n *\n * @param {object} req\n * @api private\n */\n\nfunction getCharset (req) {\n  try {\n    return (contentType.parse(req).parameters.charset || '').toLowerCase()\n  } catch (e) {\n    return undefined\n  }\n}\n\n/**\n * Get the simple type checker.\n *\n * @param {string} type\n * @return {function}\n */\n\nfunction typeChecker (type) {\n  return function checkType (req) {\n    return Boolean(typeis(req, type))\n  }\n}\n"]}