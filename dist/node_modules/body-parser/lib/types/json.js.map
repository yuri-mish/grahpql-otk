{"version":3,"sources":["../../../../../node_modules/body-parser/lib/types/json.js"],"names":["bytes","require","contentType","createError","debug","read","typeis","module","exports","json","FIRST_CHAR_REGEXP","options","opts","limit","parse","inflate","reviver","strict","type","verify","TypeError","shouldParse","typeChecker","body","length","first","firstchar","createStrictSyntaxError","JSON","e","normalizeJsonSyntaxError","message","stack","jsonParser","req","res","next","_body","hasBody","headers","charset","getCharset","substr","toUpperCase","encoding","str","char","index","indexOf","partial","substring","SyntaxError","replace","exec","parameters","toLowerCase","undefined","error","obj","keys","Object","getOwnPropertyNames","i","key","checkType","Boolean"],"mappings":"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","file":"json.js","sourcesContent":["/*!\n * body-parser\n * Copyright(c) 2014 Jonathan Ong\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * Module dependencies.\n * @private\n */\n\nvar bytes = require('bytes')\nvar contentType = require('content-type')\nvar createError = require('http-errors')\nvar debug = require('debug')('body-parser:json')\nvar read = require('../read')\nvar typeis = require('type-is')\n\n/**\n * Module exports.\n */\n\nmodule.exports = json\n\n/**\n * RegExp to match the first non-space in a string.\n *\n * Allowed whitespace is defined in RFC 7159:\n *\n *    ws = *(\n *            %x20 /              ; Space\n *            %x09 /              ; Horizontal tab\n *            %x0A /              ; Line feed or New line\n *            %x0D )              ; Carriage return\n */\n\nvar FIRST_CHAR_REGEXP = /^[\\x20\\x09\\x0a\\x0d]*(.)/ // eslint-disable-line no-control-regex\n\n/**\n * Create a middleware to parse JSON bodies.\n *\n * @param {object} [options]\n * @return {function}\n * @public\n */\n\nfunction json (options) {\n  var opts = options || {}\n\n  var limit = typeof opts.limit !== 'number'\n    ? bytes.parse(opts.limit || '100kb')\n    : opts.limit\n  var inflate = opts.inflate !== false\n  var reviver = opts.reviver\n  var strict = opts.strict !== false\n  var type = opts.type || 'application/json'\n  var verify = opts.verify || false\n\n  if (verify !== false && typeof verify !== 'function') {\n    throw new TypeError('option verify must be function')\n  }\n\n  // create the appropriate type checking function\n  var shouldParse = typeof type !== 'function'\n    ? typeChecker(type)\n    : type\n\n  function parse (body) {\n    if (body.length === 0) {\n      // special-case empty json body, as it's a common client-side mistake\n      // TODO: maybe make this configurable or part of \"strict\" option\n      return {}\n    }\n\n    if (strict) {\n      var first = firstchar(body)\n\n      if (first !== '{' && first !== '[') {\n        debug('strict violation')\n        throw createStrictSyntaxError(body, first)\n      }\n    }\n\n    try {\n      debug('parse json')\n      return JSON.parse(body, reviver)\n    } catch (e) {\n      throw normalizeJsonSyntaxError(e, {\n        message: e.message,\n        stack: e.stack\n      })\n    }\n  }\n\n  return function jsonParser (req, res, next) {\n    if (req._body) {\n      debug('body already parsed')\n      next()\n      return\n    }\n\n    req.body = req.body || {}\n\n    // skip requests without bodies\n    if (!typeis.hasBody(req)) {\n      debug('skip empty body')\n      next()\n      return\n    }\n\n    debug('content-type %j', req.headers['content-type'])\n\n    // determine if request should be parsed\n    if (!shouldParse(req)) {\n      debug('skip parsing')\n      next()\n      return\n    }\n\n    // assert charset per RFC 7159 sec 8.1\n    var charset = getCharset(req) || 'utf-8'\n    if (charset.substr(0, 4) !== 'utf-') {\n      debug('invalid charset')\n      next(createError(415, 'unsupported charset \"' + charset.toUpperCase() + '\"', {\n        charset: charset,\n        type: 'charset.unsupported'\n      }))\n      return\n    }\n\n    // read\n    read(req, res, next, parse, debug, {\n      encoding: charset,\n      inflate: inflate,\n      limit: limit,\n      verify: verify\n    })\n  }\n}\n\n/**\n * Create strict violation syntax error matching native error.\n *\n * @param {string} str\n * @param {string} char\n * @return {Error}\n * @private\n */\n\nfunction createStrictSyntaxError (str, char) {\n  var index = str.indexOf(char)\n  var partial = str.substring(0, index) + '#'\n\n  try {\n    JSON.parse(partial); /* istanbul ignore next */ throw new SyntaxError('strict violation')\n  } catch (e) {\n    return normalizeJsonSyntaxError(e, {\n      message: e.message.replace('#', char),\n      stack: e.stack\n    })\n  }\n}\n\n/**\n * Get the first non-whitespace character in a string.\n *\n * @param {string} str\n * @return {function}\n * @private\n */\n\nfunction firstchar (str) {\n  return FIRST_CHAR_REGEXP.exec(str)[1]\n}\n\n/**\n * Get the charset of a request.\n *\n * @param {object} req\n * @api private\n */\n\nfunction getCharset (req) {\n  try {\n    return (contentType.parse(req).parameters.charset || '').toLowerCase()\n  } catch (e) {\n    return undefined\n  }\n}\n\n/**\n * Normalize a SyntaxError for JSON.parse.\n *\n * @param {SyntaxError} error\n * @param {object} obj\n * @return {SyntaxError}\n */\n\nfunction normalizeJsonSyntaxError (error, obj) {\n  var keys = Object.getOwnPropertyNames(error)\n\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i]\n    if (key !== 'stack' && key !== 'message') {\n      delete error[key]\n    }\n  }\n\n  // replace stack before message for Node.js 0.10 and below\n  error.stack = obj.stack.replace(error.message, obj.message)\n  error.message = obj.message\n\n  return error\n}\n\n/**\n * Get the simple type checker.\n *\n * @param {string} type\n * @return {function}\n */\n\nfunction typeChecker (type) {\n  return function checkType (req) {\n    return Boolean(typeis(req, type))\n  }\n}\n"]}