{"version":3,"sources":["../../../../../node_modules/depd/lib/compat/callsite-tostring.js"],"names":["module","exports","callSiteToString","callSiteFileLocation","callSite","fileName","fileLocation","isNative","isEval","getScriptNameOrSourceURL","getEvalOrigin","getFileName","lineNumber","getLineNumber","columnNumber","getColumnNumber","addSuffix","functionName","getFunctionName","isConstructor","isMethodCall","isToplevel","line","methodName","getMethodName","typeName","getConstructorName","indexOf","lastIndexOf","length","obj","receiver","constructor","name"],"mappings":"AAAA;;;;;;AAMA;;AAEA;;;;AAIAA,OAAOC,OAAP,GAAiBC,gBAAjB;;AAEA;;;;AAIA,SAASC,oBAAT,CAA+BC,QAA/B,EAAyC;AACvC,MAAIC,QAAJ;AACA,MAAIC,eAAe,EAAnB;;AAEA,MAAIF,SAASG,QAAT,EAAJ,EAAyB;AACvBD,mBAAe,QAAf;AACD,GAFD,MAEO,IAAIF,SAASI,MAAT,EAAJ,EAAuB;AAC5BH,eAAWD,SAASK,wBAAT,EAAX;AACA,QAAI,CAACJ,QAAL,EAAe;AACbC,qBAAeF,SAASM,aAAT,EAAf;AACD;AACF,GALM,MAKA;AACLL,eAAWD,SAASO,WAAT,EAAX;AACD;;AAED,MAAIN,QAAJ,EAAc;AACZC,oBAAgBD,QAAhB;;AAEA,QAAIO,aAAaR,SAASS,aAAT,EAAjB;AACA,QAAID,cAAc,IAAlB,EAAwB;AACtBN,sBAAgB,MAAMM,UAAtB;;AAEA,UAAIE,eAAeV,SAASW,eAAT,EAAnB;AACA,UAAID,YAAJ,EAAkB;AAChBR,wBAAgB,MAAMQ,YAAtB;AACD;AACF;AACF;;AAED,SAAOR,gBAAgB,gBAAvB;AACD;;AAED;;;;AAIA,SAASJ,gBAAT,CAA2BE,QAA3B,EAAqC;AACnC,MAAIY,YAAY,IAAhB;AACA,MAAIV,eAAeH,qBAAqBC,QAArB,CAAnB;AACA,MAAIa,eAAeb,SAASc,eAAT,EAAnB;AACA,MAAIC,gBAAgBf,SAASe,aAAT,EAApB;AACA,MAAIC,eAAe,EAAEhB,SAASiB,UAAT,MAAyBF,aAA3B,CAAnB;AACA,MAAIG,OAAO,EAAX;;AAEA,MAAIF,YAAJ,EAAkB;AAChB,QAAIG,aAAanB,SAASoB,aAAT,EAAjB;AACA,QAAIC,WAAWC,mBAAmBtB,QAAnB,CAAf;;AAEA,QAAIa,YAAJ,EAAkB;AAChB,UAAIQ,YAAYR,aAAaU,OAAb,CAAqBF,QAArB,MAAmC,CAAnD,EAAsD;AACpDH,gBAAQG,WAAW,GAAnB;AACD;;AAEDH,cAAQL,YAAR;;AAEA,UAAIM,cAAcN,aAAaW,WAAb,CAAyB,MAAML,UAA/B,MAA+CN,aAAaY,MAAb,GAAsBN,WAAWM,MAAjC,GAA0C,CAA3G,EAA8G;AAC5GP,gBAAQ,UAAUC,UAAV,GAAuB,GAA/B;AACD;AACF,KAVD,MAUO;AACLD,cAAQG,WAAW,GAAX,IAAkBF,cAAc,aAAhC,CAAR;AACD;AACF,GAjBD,MAiBO,IAAIJ,aAAJ,EAAmB;AACxBG,YAAQ,UAAUL,gBAAgB,aAA1B,CAAR;AACD,GAFM,MAEA,IAAIA,YAAJ,EAAkB;AACvBK,YAAQL,YAAR;AACD,GAFM,MAEA;AACLD,gBAAY,KAAZ;AACAM,YAAQhB,YAAR;AACD;;AAED,MAAIU,SAAJ,EAAe;AACbM,YAAQ,OAAOhB,YAAP,GAAsB,GAA9B;AACD;;AAED,SAAOgB,IAAP;AACD;;AAED;;;;AAIA,SAASI,kBAAT,CAA6BI,GAA7B,EAAkC;AAChC,MAAIC,WAAWD,IAAIC,QAAnB;AACA,SAAQA,SAASC,WAAT,IAAwBD,SAASC,WAAT,CAAqBC,IAA9C,IAAuD,IAA9D;AACD","file":"callsite-tostring.js","sourcesContent":["/*!\n * depd\n * Copyright(c) 2014 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * Module exports.\n */\n\nmodule.exports = callSiteToString\n\n/**\n * Format a CallSite file location to a string.\n */\n\nfunction callSiteFileLocation (callSite) {\n  var fileName\n  var fileLocation = ''\n\n  if (callSite.isNative()) {\n    fileLocation = 'native'\n  } else if (callSite.isEval()) {\n    fileName = callSite.getScriptNameOrSourceURL()\n    if (!fileName) {\n      fileLocation = callSite.getEvalOrigin()\n    }\n  } else {\n    fileName = callSite.getFileName()\n  }\n\n  if (fileName) {\n    fileLocation += fileName\n\n    var lineNumber = callSite.getLineNumber()\n    if (lineNumber != null) {\n      fileLocation += ':' + lineNumber\n\n      var columnNumber = callSite.getColumnNumber()\n      if (columnNumber) {\n        fileLocation += ':' + columnNumber\n      }\n    }\n  }\n\n  return fileLocation || 'unknown source'\n}\n\n/**\n * Format a CallSite to a string.\n */\n\nfunction callSiteToString (callSite) {\n  var addSuffix = true\n  var fileLocation = callSiteFileLocation(callSite)\n  var functionName = callSite.getFunctionName()\n  var isConstructor = callSite.isConstructor()\n  var isMethodCall = !(callSite.isToplevel() || isConstructor)\n  var line = ''\n\n  if (isMethodCall) {\n    var methodName = callSite.getMethodName()\n    var typeName = getConstructorName(callSite)\n\n    if (functionName) {\n      if (typeName && functionName.indexOf(typeName) !== 0) {\n        line += typeName + '.'\n      }\n\n      line += functionName\n\n      if (methodName && functionName.lastIndexOf('.' + methodName) !== functionName.length - methodName.length - 1) {\n        line += ' [as ' + methodName + ']'\n      }\n    } else {\n      line += typeName + '.' + (methodName || '<anonymous>')\n    }\n  } else if (isConstructor) {\n    line += 'new ' + (functionName || '<anonymous>')\n  } else if (functionName) {\n    line += functionName\n  } else {\n    addSuffix = false\n    line += fileLocation\n  }\n\n  if (addSuffix) {\n    line += ' (' + fileLocation + ')'\n  }\n\n  return line\n}\n\n/**\n * Get constructor name of reviver.\n */\n\nfunction getConstructorName (obj) {\n  var receiver = obj.receiver\n  return (receiver.constructor && receiver.constructor.name) || null\n}\n"]}