{"version":3,"sources":["../../../node_modules/decode-uri-component/index.js"],"names":["token","singleMatcher","RegExp","multiMatcher","decodeComponents","components","split","decodeURIComponent","join","err","length","left","slice","right","Array","prototype","concat","call","decode","input","tokens","match","i","customDecodeURIComponent","replaceMap","exec","result","entries","Object","keys","key","replace","module","exports","encodedURI","TypeError"],"mappings":"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","file":"index.js","sourcesContent":["'use strict';\nvar token = '%[a-f0-9]{2}';\nvar singleMatcher = new RegExp(token, 'gi');\nvar multiMatcher = new RegExp('(' + token + ')+', 'gi');\n\nfunction decodeComponents(components, split) {\n\ttry {\n\t\t// Try to decode the entire string first\n\t\treturn decodeURIComponent(components.join(''));\n\t} catch (err) {\n\t\t// Do nothing\n\t}\n\n\tif (components.length === 1) {\n\t\treturn components;\n\t}\n\n\tsplit = split || 1;\n\n\t// Split the array in 2 parts\n\tvar left = components.slice(0, split);\n\tvar right = components.slice(split);\n\n\treturn Array.prototype.concat.call([], decodeComponents(left), decodeComponents(right));\n}\n\nfunction decode(input) {\n\ttry {\n\t\treturn decodeURIComponent(input);\n\t} catch (err) {\n\t\tvar tokens = input.match(singleMatcher);\n\n\t\tfor (var i = 1; i < tokens.length; i++) {\n\t\t\tinput = decodeComponents(tokens, i).join('');\n\n\t\t\ttokens = input.match(singleMatcher);\n\t\t}\n\n\t\treturn input;\n\t}\n}\n\nfunction customDecodeURIComponent(input) {\n\t// Keep track of all the replacements and prefill the map with the `BOM`\n\tvar replaceMap = {\n\t\t'%FE%FF': '\\uFFFD\\uFFFD',\n\t\t'%FF%FE': '\\uFFFD\\uFFFD'\n\t};\n\n\tvar match = multiMatcher.exec(input);\n\twhile (match) {\n\t\ttry {\n\t\t\t// Decode as big chunks as possible\n\t\t\treplaceMap[match[0]] = decodeURIComponent(match[0]);\n\t\t} catch (err) {\n\t\t\tvar result = decode(match[0]);\n\n\t\t\tif (result !== match[0]) {\n\t\t\t\treplaceMap[match[0]] = result;\n\t\t\t}\n\t\t}\n\n\t\tmatch = multiMatcher.exec(input);\n\t}\n\n\t// Add `%C2` at the end of the map to make sure it does not replace the combinator before everything else\n\treplaceMap['%C2'] = '\\uFFFD';\n\n\tvar entries = Object.keys(replaceMap);\n\n\tfor (var i = 0; i < entries.length; i++) {\n\t\t// Replace all decoded components\n\t\tvar key = entries[i];\n\t\tinput = input.replace(new RegExp(key, 'g'), replaceMap[key]);\n\t}\n\n\treturn input;\n}\n\nmodule.exports = function (encodedURI) {\n\tif (typeof encodedURI !== 'string') {\n\t\tthrow new TypeError('Expected `encodedURI` to be of type `string`, got `' + typeof encodedURI + '`');\n\t}\n\n\ttry {\n\t\tencodedURI = encodedURI.replace(/\\+/g, ' ');\n\n\t\t// Try the built in decoder first\n\t\treturn decodeURIComponent(encodedURI);\n\t} catch (err) {\n\t\t// Fallback to a more advanced decoder\n\t\treturn customDecodeURIComponent(encodedURI);\n\t}\n};\n"]}