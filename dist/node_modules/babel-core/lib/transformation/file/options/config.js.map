{"version":3,"sources":["../../../../../../../node_modules/babel-core/lib/transformation/file/options/config.js"],"names":["module","exports","filename","type","description","default","shorthand","filenameRelative","hidden","inputSourceMap","env","mode","retainLines","highlightCode","suppressDeprecationMessages","presets","plugins","ignore","only","code","metadata","ast","extends","comments","shouldPrintComment","wrapPluginVisitorMethod","compact","minified","sourceMap","alias","sourceMaps","sourceMapTarget","sourceFileName","sourceRoot","babelrc","sourceType","auxiliaryCommentBefore","auxiliaryCommentAfter","resolveModuleSource","getModuleId","moduleRoot","moduleIds","moduleId","passPerPreset","parserOpts","generatorOpts"],"mappings":"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","file":"config.js","sourcesContent":["\"use strict\";\n\nmodule.exports = {\n  filename: {\n    type: \"filename\",\n    description: \"filename to use when reading from stdin - this will be used in source-maps, errors etc\",\n    default: \"unknown\",\n    shorthand: \"f\"\n  },\n\n  filenameRelative: {\n    hidden: true,\n    type: \"string\"\n  },\n\n  inputSourceMap: {\n    hidden: true\n  },\n\n  env: {\n    hidden: true,\n    default: {}\n  },\n\n  mode: {\n    description: \"\",\n    hidden: true\n  },\n\n  retainLines: {\n    type: \"boolean\",\n    default: false,\n    description: \"retain line numbers - will result in really ugly code\"\n  },\n\n  highlightCode: {\n    description: \"enable/disable ANSI syntax highlighting of code frames (on by default)\",\n    type: \"boolean\",\n    default: true\n  },\n\n  suppressDeprecationMessages: {\n    type: \"boolean\",\n    default: false,\n    hidden: true\n  },\n\n  presets: {\n    type: \"list\",\n    description: \"\",\n    default: []\n  },\n\n  plugins: {\n    type: \"list\",\n    default: [],\n    description: \"\"\n  },\n\n  ignore: {\n    type: \"list\",\n    description: \"list of glob paths to **not** compile\",\n    default: []\n  },\n\n  only: {\n    type: \"list\",\n    description: \"list of glob paths to **only** compile\"\n  },\n\n  code: {\n    hidden: true,\n    default: true,\n    type: \"boolean\"\n  },\n\n  metadata: {\n    hidden: true,\n    default: true,\n    type: \"boolean\"\n  },\n\n  ast: {\n    hidden: true,\n    default: true,\n    type: \"boolean\"\n  },\n\n  extends: {\n    type: \"string\",\n    hidden: true\n  },\n\n  comments: {\n    type: \"boolean\",\n    default: true,\n    description: \"write comments to generated output (true by default)\"\n  },\n\n  shouldPrintComment: {\n    hidden: true,\n    description: \"optional callback to control whether a comment should be inserted, when this is used the comments option is ignored\"\n  },\n\n  wrapPluginVisitorMethod: {\n    hidden: true,\n    description: \"optional callback to wrap all visitor methods\"\n  },\n\n  compact: {\n    type: \"booleanString\",\n    default: \"auto\",\n    description: \"do not include superfluous whitespace characters and line terminators [true|false|auto]\"\n  },\n\n  minified: {\n    type: \"boolean\",\n    default: false,\n    description: \"save as much bytes when printing [true|false]\"\n  },\n\n  sourceMap: {\n    alias: \"sourceMaps\",\n    hidden: true\n  },\n\n  sourceMaps: {\n    type: \"booleanString\",\n    description: \"[true|false|inline]\",\n    default: false,\n    shorthand: \"s\"\n  },\n\n  sourceMapTarget: {\n    type: \"string\",\n    description: \"set `file` on returned source map\"\n  },\n\n  sourceFileName: {\n    type: \"string\",\n    description: \"set `sources[0]` on returned source map\"\n  },\n\n  sourceRoot: {\n    type: \"filename\",\n    description: \"the root from which all sources are relative\"\n  },\n\n  babelrc: {\n    description: \"Whether or not to look up .babelrc and .babelignore files\",\n    type: \"boolean\",\n    default: true\n  },\n\n  sourceType: {\n    description: \"\",\n    default: \"module\"\n  },\n\n  auxiliaryCommentBefore: {\n    type: \"string\",\n    description: \"print a comment before any injected non-user code\"\n  },\n\n  auxiliaryCommentAfter: {\n    type: \"string\",\n    description: \"print a comment after any injected non-user code\"\n  },\n\n  resolveModuleSource: {\n    hidden: true\n  },\n\n  getModuleId: {\n    hidden: true\n  },\n\n  moduleRoot: {\n    type: \"filename\",\n    description: \"optional prefix for the AMD module formatter that will be prepend to the filename on module definitions\"\n  },\n\n  moduleIds: {\n    type: \"boolean\",\n    default: false,\n    shorthand: \"M\",\n    description: \"insert an explicit id for modules\"\n  },\n\n  moduleId: {\n    description: \"specify a custom name for module ids\",\n    type: \"string\"\n  },\n\n  passPerPreset: {\n    description: \"Whether to spawn a traversal pass per a preset. By default all presets are merged.\",\n    type: \"boolean\",\n    default: false,\n    hidden: true\n  },\n\n  parserOpts: {\n    description: \"Options to pass into the parser, or to change parsers (parserOpts.parser)\",\n    default: false\n  },\n\n  generatorOpts: {\n    description: \"Options to pass into the generator, or to change generators (generatorOpts.generator)\",\n    default: false\n  }\n};"]}