{"version":3,"sources":["../../../../node_modules/express/lib/view.js"],"names":["debug","require","path","fs","dirname","basename","extname","join","resolve","module","exports","View","name","options","opts","defaultEngine","ext","root","Error","fileName","engines","mod","substr","fn","__express","engine","lookup","prototype","roots","concat","i","length","loc","dir","file","render","callback","stat","tryStat","isFile","statSync","e","undefined"],"mappings":"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","file":"view.js","sourcesContent":["/*!\n * express\n * Copyright(c) 2009-2013 TJ Holowaychuk\n * Copyright(c) 2013 Roman Shtylman\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n * @private\n */\n\nvar debug = require('debug')('express:view');\nvar path = require('path');\nvar fs = require('fs');\n\n/**\n * Module variables.\n * @private\n */\n\nvar dirname = path.dirname;\nvar basename = path.basename;\nvar extname = path.extname;\nvar join = path.join;\nvar resolve = path.resolve;\n\n/**\n * Module exports.\n * @public\n */\n\nmodule.exports = View;\n\n/**\n * Initialize a new `View` with the given `name`.\n *\n * Options:\n *\n *   - `defaultEngine` the default template engine name\n *   - `engines` template engine require() cache\n *   - `root` root path for view lookup\n *\n * @param {string} name\n * @param {object} options\n * @public\n */\n\nfunction View(name, options) {\n  var opts = options || {};\n\n  this.defaultEngine = opts.defaultEngine;\n  this.ext = extname(name);\n  this.name = name;\n  this.root = opts.root;\n\n  if (!this.ext && !this.defaultEngine) {\n    throw new Error('No default engine was specified and no extension was provided.');\n  }\n\n  var fileName = name;\n\n  if (!this.ext) {\n    // get extension from default engine name\n    this.ext = this.defaultEngine[0] !== '.'\n      ? '.' + this.defaultEngine\n      : this.defaultEngine;\n\n    fileName += this.ext;\n  }\n\n  if (!opts.engines[this.ext]) {\n    // load engine\n    var mod = this.ext.substr(1)\n    debug('require \"%s\"', mod)\n\n    // default engine export\n    var fn = require(mod).__express\n\n    if (typeof fn !== 'function') {\n      throw new Error('Module \"' + mod + '\" does not provide a view engine.')\n    }\n\n    opts.engines[this.ext] = fn\n  }\n\n  // store loaded engine\n  this.engine = opts.engines[this.ext];\n\n  // lookup path\n  this.path = this.lookup(fileName);\n}\n\n/**\n * Lookup view by the given `name`\n *\n * @param {string} name\n * @private\n */\n\nView.prototype.lookup = function lookup(name) {\n  var path;\n  var roots = [].concat(this.root);\n\n  debug('lookup \"%s\"', name);\n\n  for (var i = 0; i < roots.length && !path; i++) {\n    var root = roots[i];\n\n    // resolve the path\n    var loc = resolve(root, name);\n    var dir = dirname(loc);\n    var file = basename(loc);\n\n    // resolve the file\n    path = this.resolve(dir, file);\n  }\n\n  return path;\n};\n\n/**\n * Render with the given options.\n *\n * @param {object} options\n * @param {function} callback\n * @private\n */\n\nView.prototype.render = function render(options, callback) {\n  debug('render \"%s\"', this.path);\n  this.engine(this.path, options, callback);\n};\n\n/**\n * Resolve the file within the given directory.\n *\n * @param {string} dir\n * @param {string} file\n * @private\n */\n\nView.prototype.resolve = function resolve(dir, file) {\n  var ext = this.ext;\n\n  // <path>.<ext>\n  var path = join(dir, file);\n  var stat = tryStat(path);\n\n  if (stat && stat.isFile()) {\n    return path;\n  }\n\n  // <path>/index.<ext>\n  path = join(dir, basename(file, ext), 'index' + ext);\n  stat = tryStat(path);\n\n  if (stat && stat.isFile()) {\n    return path;\n  }\n};\n\n/**\n * Return a stat, maybe.\n *\n * @param {string} path\n * @return {fs.Stats}\n * @private\n */\n\nfunction tryStat(path) {\n  debug('stat \"%s\"', path);\n\n  try {\n    return fs.statSync(path);\n  } catch (e) {\n    return undefined;\n  }\n}\n"]}