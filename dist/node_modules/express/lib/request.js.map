{"version":3,"sources":["../../../../node_modules/express/lib/request.js"],"names":["accepts","require","deprecate","isIP","typeis","http","fresh","parseRange","parse","proxyaddr","req","Object","create","IncomingMessage","prototype","module","exports","get","header","name","TypeError","lc","toLowerCase","headers","referrer","referer","accept","types","apply","arguments","acceptsEncodings","encodings","acceptsEncoding","function","acceptsCharsets","charsets","acceptsCharset","acceptsLanguages","languages","acceptsLanguage","range","size","options","param","defaultValue","params","body","query","args","length","hasOwnProperty","is","arr","Array","isArray","i","defineGetter","protocol","proto","connection","encrypted","trust","app","remoteAddress","index","indexOf","substring","trim","secure","ip","ips","addrs","all","reverse","pop","subdomains","hostname","offset","split","slice","path","pathname","host","trimRight","method","res","status","statusCode","stale","xhr","val","obj","getter","defineProperty","configurable","enumerable"],"mappings":"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","file":"request.js","sourcesContent":["/*!\n * express\n * Copyright(c) 2009-2013 TJ Holowaychuk\n * Copyright(c) 2013 Roman Shtylman\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n * @private\n */\n\nvar accepts = require('accepts');\nvar deprecate = require('depd')('express');\nvar isIP = require('net').isIP;\nvar typeis = require('type-is');\nvar http = require('http');\nvar fresh = require('fresh');\nvar parseRange = require('range-parser');\nvar parse = require('parseurl');\nvar proxyaddr = require('proxy-addr');\n\n/**\n * Request prototype.\n * @public\n */\n\nvar req = Object.create(http.IncomingMessage.prototype)\n\n/**\n * Module exports.\n * @public\n */\n\nmodule.exports = req\n\n/**\n * Return request header.\n *\n * The `Referrer` header field is special-cased,\n * both `Referrer` and `Referer` are interchangeable.\n *\n * Examples:\n *\n *     req.get('Content-Type');\n *     // => \"text/plain\"\n *\n *     req.get('content-type');\n *     // => \"text/plain\"\n *\n *     req.get('Something');\n *     // => undefined\n *\n * Aliased as `req.header()`.\n *\n * @param {String} name\n * @return {String}\n * @public\n */\n\nreq.get =\nreq.header = function header(name) {\n  if (!name) {\n    throw new TypeError('name argument is required to req.get');\n  }\n\n  if (typeof name !== 'string') {\n    throw new TypeError('name must be a string to req.get');\n  }\n\n  var lc = name.toLowerCase();\n\n  switch (lc) {\n    case 'referer':\n    case 'referrer':\n      return this.headers.referrer\n        || this.headers.referer;\n    default:\n      return this.headers[lc];\n  }\n};\n\n/**\n * To do: update docs.\n *\n * Check if the given `type(s)` is acceptable, returning\n * the best match when true, otherwise `undefined`, in which\n * case you should respond with 406 \"Not Acceptable\".\n *\n * The `type` value may be a single MIME type string\n * such as \"application/json\", an extension name\n * such as \"json\", a comma-delimited list such as \"json, html, text/plain\",\n * an argument list such as `\"json\", \"html\", \"text/plain\"`,\n * or an array `[\"json\", \"html\", \"text/plain\"]`. When a list\n * or array is given, the _best_ match, if any is returned.\n *\n * Examples:\n *\n *     // Accept: text/html\n *     req.accepts('html');\n *     // => \"html\"\n *\n *     // Accept: text/*, application/json\n *     req.accepts('html');\n *     // => \"html\"\n *     req.accepts('text/html');\n *     // => \"text/html\"\n *     req.accepts('json, text');\n *     // => \"json\"\n *     req.accepts('application/json');\n *     // => \"application/json\"\n *\n *     // Accept: text/*, application/json\n *     req.accepts('image/png');\n *     req.accepts('png');\n *     // => undefined\n *\n *     // Accept: text/*;q=.5, application/json\n *     req.accepts(['html', 'json']);\n *     req.accepts('html', 'json');\n *     req.accepts('html, json');\n *     // => \"json\"\n *\n * @param {String|Array} type(s)\n * @return {String|Array|Boolean}\n * @public\n */\n\nreq.accepts = function(){\n  var accept = accepts(this);\n  return accept.types.apply(accept, arguments);\n};\n\n/**\n * Check if the given `encoding`s are accepted.\n *\n * @param {String} ...encoding\n * @return {String|Array}\n * @public\n */\n\nreq.acceptsEncodings = function(){\n  var accept = accepts(this);\n  return accept.encodings.apply(accept, arguments);\n};\n\nreq.acceptsEncoding = deprecate.function(req.acceptsEncodings,\n  'req.acceptsEncoding: Use acceptsEncodings instead');\n\n/**\n * Check if the given `charset`s are acceptable,\n * otherwise you should respond with 406 \"Not Acceptable\".\n *\n * @param {String} ...charset\n * @return {String|Array}\n * @public\n */\n\nreq.acceptsCharsets = function(){\n  var accept = accepts(this);\n  return accept.charsets.apply(accept, arguments);\n};\n\nreq.acceptsCharset = deprecate.function(req.acceptsCharsets,\n  'req.acceptsCharset: Use acceptsCharsets instead');\n\n/**\n * Check if the given `lang`s are acceptable,\n * otherwise you should respond with 406 \"Not Acceptable\".\n *\n * @param {String} ...lang\n * @return {String|Array}\n * @public\n */\n\nreq.acceptsLanguages = function(){\n  var accept = accepts(this);\n  return accept.languages.apply(accept, arguments);\n};\n\nreq.acceptsLanguage = deprecate.function(req.acceptsLanguages,\n  'req.acceptsLanguage: Use acceptsLanguages instead');\n\n/**\n * Parse Range header field, capping to the given `size`.\n *\n * Unspecified ranges such as \"0-\" require knowledge of your resource length. In\n * the case of a byte range this is of course the total number of bytes. If the\n * Range header field is not given `undefined` is returned, `-1` when unsatisfiable,\n * and `-2` when syntactically invalid.\n *\n * When ranges are returned, the array has a \"type\" property which is the type of\n * range that is required (most commonly, \"bytes\"). Each array element is an object\n * with a \"start\" and \"end\" property for the portion of the range.\n *\n * The \"combine\" option can be set to `true` and overlapping & adjacent ranges\n * will be combined into a single range.\n *\n * NOTE: remember that ranges are inclusive, so for example \"Range: users=0-3\"\n * should respond with 4 users when available, not 3.\n *\n * @param {number} size\n * @param {object} [options]\n * @param {boolean} [options.combine=false]\n * @return {number|array}\n * @public\n */\n\nreq.range = function range(size, options) {\n  var range = this.get('Range');\n  if (!range) return;\n  return parseRange(size, range, options);\n};\n\n/**\n * Return the value of param `name` when present or `defaultValue`.\n *\n *  - Checks route placeholders, ex: _/user/:id_\n *  - Checks body params, ex: id=12, {\"id\":12}\n *  - Checks query string params, ex: ?id=12\n *\n * To utilize request bodies, `req.body`\n * should be an object. This can be done by using\n * the `bodyParser()` middleware.\n *\n * @param {String} name\n * @param {Mixed} [defaultValue]\n * @return {String}\n * @public\n */\n\nreq.param = function param(name, defaultValue) {\n  var params = this.params || {};\n  var body = this.body || {};\n  var query = this.query || {};\n\n  var args = arguments.length === 1\n    ? 'name'\n    : 'name, default';\n  deprecate('req.param(' + args + '): Use req.params, req.body, or req.query instead');\n\n  if (null != params[name] && params.hasOwnProperty(name)) return params[name];\n  if (null != body[name]) return body[name];\n  if (null != query[name]) return query[name];\n\n  return defaultValue;\n};\n\n/**\n * Check if the incoming request contains the \"Content-Type\"\n * header field, and it contains the give mime `type`.\n *\n * Examples:\n *\n *      // With Content-Type: text/html; charset=utf-8\n *      req.is('html');\n *      req.is('text/html');\n *      req.is('text/*');\n *      // => true\n *\n *      // When Content-Type is application/json\n *      req.is('json');\n *      req.is('application/json');\n *      req.is('application/*');\n *      // => true\n *\n *      req.is('html');\n *      // => false\n *\n * @param {String|Array} types...\n * @return {String|false|null}\n * @public\n */\n\nreq.is = function is(types) {\n  var arr = types;\n\n  // support flattened arguments\n  if (!Array.isArray(types)) {\n    arr = new Array(arguments.length);\n    for (var i = 0; i < arr.length; i++) {\n      arr[i] = arguments[i];\n    }\n  }\n\n  return typeis(this, arr);\n};\n\n/**\n * Return the protocol string \"http\" or \"https\"\n * when requested with TLS. When the \"trust proxy\"\n * setting trusts the socket address, the\n * \"X-Forwarded-Proto\" header field will be trusted\n * and used if present.\n *\n * If you're running behind a reverse proxy that\n * supplies https for you this may be enabled.\n *\n * @return {String}\n * @public\n */\n\ndefineGetter(req, 'protocol', function protocol(){\n  var proto = this.connection.encrypted\n    ? 'https'\n    : 'http';\n  var trust = this.app.get('trust proxy fn');\n\n  if (!trust(this.connection.remoteAddress, 0)) {\n    return proto;\n  }\n\n  // Note: X-Forwarded-Proto is normally only ever a\n  //       single value, but this is to be safe.\n  var header = this.get('X-Forwarded-Proto') || proto\n  var index = header.indexOf(',')\n\n  return index !== -1\n    ? header.substring(0, index).trim()\n    : header.trim()\n});\n\n/**\n * Short-hand for:\n *\n *    req.protocol === 'https'\n *\n * @return {Boolean}\n * @public\n */\n\ndefineGetter(req, 'secure', function secure(){\n  return this.protocol === 'https';\n});\n\n/**\n * Return the remote address from the trusted proxy.\n *\n * The is the remote address on the socket unless\n * \"trust proxy\" is set.\n *\n * @return {String}\n * @public\n */\n\ndefineGetter(req, 'ip', function ip(){\n  var trust = this.app.get('trust proxy fn');\n  return proxyaddr(this, trust);\n});\n\n/**\n * When \"trust proxy\" is set, trusted proxy addresses + client.\n *\n * For example if the value were \"client, proxy1, proxy2\"\n * you would receive the array `[\"client\", \"proxy1\", \"proxy2\"]`\n * where \"proxy2\" is the furthest down-stream and \"proxy1\" and\n * \"proxy2\" were trusted.\n *\n * @return {Array}\n * @public\n */\n\ndefineGetter(req, 'ips', function ips() {\n  var trust = this.app.get('trust proxy fn');\n  var addrs = proxyaddr.all(this, trust);\n\n  // reverse the order (to farthest -> closest)\n  // and remove socket address\n  addrs.reverse().pop()\n\n  return addrs\n});\n\n/**\n * Return subdomains as an array.\n *\n * Subdomains are the dot-separated parts of the host before the main domain of\n * the app. By default, the domain of the app is assumed to be the last two\n * parts of the host. This can be changed by setting \"subdomain offset\".\n *\n * For example, if the domain is \"tobi.ferrets.example.com\":\n * If \"subdomain offset\" is not set, req.subdomains is `[\"ferrets\", \"tobi\"]`.\n * If \"subdomain offset\" is 3, req.subdomains is `[\"tobi\"]`.\n *\n * @return {Array}\n * @public\n */\n\ndefineGetter(req, 'subdomains', function subdomains() {\n  var hostname = this.hostname;\n\n  if (!hostname) return [];\n\n  var offset = this.app.get('subdomain offset');\n  var subdomains = !isIP(hostname)\n    ? hostname.split('.').reverse()\n    : [hostname];\n\n  return subdomains.slice(offset);\n});\n\n/**\n * Short-hand for `url.parse(req.url).pathname`.\n *\n * @return {String}\n * @public\n */\n\ndefineGetter(req, 'path', function path() {\n  return parse(this).pathname;\n});\n\n/**\n * Parse the \"Host\" header field to a hostname.\n *\n * When the \"trust proxy\" setting trusts the socket\n * address, the \"X-Forwarded-Host\" header field will\n * be trusted.\n *\n * @return {String}\n * @public\n */\n\ndefineGetter(req, 'hostname', function hostname(){\n  var trust = this.app.get('trust proxy fn');\n  var host = this.get('X-Forwarded-Host');\n\n  if (!host || !trust(this.connection.remoteAddress, 0)) {\n    host = this.get('Host');\n  } else if (host.indexOf(',') !== -1) {\n    // Note: X-Forwarded-Host is normally only ever a\n    //       single value, but this is to be safe.\n    host = host.substring(0, host.indexOf(',')).trimRight()\n  }\n\n  if (!host) return;\n\n  // IPv6 literal support\n  var offset = host[0] === '['\n    ? host.indexOf(']') + 1\n    : 0;\n  var index = host.indexOf(':', offset);\n\n  return index !== -1\n    ? host.substring(0, index)\n    : host;\n});\n\n// TODO: change req.host to return host in next major\n\ndefineGetter(req, 'host', deprecate.function(function host(){\n  return this.hostname;\n}, 'req.host: Use req.hostname instead'));\n\n/**\n * Check if the request is fresh, aka\n * Last-Modified and/or the ETag\n * still match.\n *\n * @return {Boolean}\n * @public\n */\n\ndefineGetter(req, 'fresh', function(){\n  var method = this.method;\n  var res = this.res\n  var status = res.statusCode\n\n  // GET or HEAD for weak freshness validation only\n  if ('GET' !== method && 'HEAD' !== method) return false;\n\n  // 2xx or 304 as per rfc2616 14.26\n  if ((status >= 200 && status < 300) || 304 === status) {\n    return fresh(this.headers, {\n      'etag': res.get('ETag'),\n      'last-modified': res.get('Last-Modified')\n    })\n  }\n\n  return false;\n});\n\n/**\n * Check if the request is stale, aka\n * \"Last-Modified\" and / or the \"ETag\" for the\n * resource has changed.\n *\n * @return {Boolean}\n * @public\n */\n\ndefineGetter(req, 'stale', function stale(){\n  return !this.fresh;\n});\n\n/**\n * Check if the request was an _XMLHttpRequest_.\n *\n * @return {Boolean}\n * @public\n */\n\ndefineGetter(req, 'xhr', function xhr(){\n  var val = this.get('X-Requested-With') || '';\n  return val.toLowerCase() === 'xmlhttprequest';\n});\n\n/**\n * Helper function for creating a getter on an object.\n *\n * @param {Object} obj\n * @param {String} name\n * @param {Function} getter\n * @private\n */\nfunction defineGetter(obj, name, getter) {\n  Object.defineProperty(obj, name, {\n    configurable: true,\n    enumerable: true,\n    get: getter\n  });\n}\n"]}