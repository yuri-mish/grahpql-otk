{"version":3,"sources":["../../../node_modules/expand-range/index.js"],"names":["fill","require","module","exports","expandRange","str","options","fn","TypeError","makeRe","opts","args","split","len","length","push","apply","concat"],"mappings":"AAAA;;;;;;;AAOA;;AAEA,IAAIA,OAAOC,QAAQ,YAAR,CAAX;;AAEAC,OAAOC,OAAP,GAAiB,SAASC,WAAT,CAAqBC,GAArB,EAA0BC,OAA1B,EAAmCC,EAAnC,EAAuC;AACtD,MAAI,OAAOF,GAAP,KAAe,QAAnB,EAA6B;AAC3B,UAAM,IAAIG,SAAJ,CAAc,gCAAd,CAAN;AACD;;AAED,MAAI,OAAOF,OAAP,KAAmB,UAAvB,EAAmC;AACjCC,SAAKD,OAAL;AACAA,cAAU,EAAV;AACD;;AAED,MAAI,OAAOA,OAAP,KAAmB,SAAvB,EAAkC;AAChCA,cAAU,EAAV;AACAA,YAAQG,MAAR,GAAiB,IAAjB;AACD;;AAED;AACA,MAAIC,OAAOJ,WAAW,EAAtB;AACA,MAAIK,OAAON,IAAIO,KAAJ,CAAU,IAAV,CAAX;AACA,MAAIC,MAAMF,KAAKG,MAAf;AACA,MAAID,MAAM,CAAV,EAAa;AAAE,WAAOR,GAAP;AAAa;;AAE5B;AACA,MAAIQ,QAAQ,CAAZ,EAAe;AAAE,WAAOF,IAAP;AAAc;;AAE/B;AACA,MAAI,OAAOJ,EAAP,KAAc,SAAd,IAA2BA,OAAO,IAAtC,EAA4C;AAC1CG,SAAKD,MAAL,GAAc,IAAd;AACD;;AAEDE,OAAKI,IAAL,CAAUL,IAAV;AACA,SAAOV,KAAKgB,KAAL,CAAW,IAAX,EAAiBL,KAAKM,MAAL,CAAYV,EAAZ,CAAjB,CAAP;AACD,CA/BD","file":"index.js","sourcesContent":["/*!\n * expand-range <https://github.com/jonschlinkert/expand-range>\n *\n * Copyright (c) 2014-2015, Jon Schlinkert.\n * Licensed under the MIT license.\n */\n\n'use strict';\n\nvar fill = require('fill-range');\n\nmodule.exports = function expandRange(str, options, fn) {\n  if (typeof str !== 'string') {\n    throw new TypeError('expand-range expects a string.');\n  }\n\n  if (typeof options === 'function') {\n    fn = options;\n    options = {};\n  }\n\n  if (typeof options === 'boolean') {\n    options = {};\n    options.makeRe = true;\n  }\n\n  // create arguments to pass to fill-range\n  var opts = options || {};\n  var args = str.split('..');\n  var len = args.length;\n  if (len > 3) { return str; }\n\n  // if only one argument, it can't expand so return it\n  if (len === 1) { return args; }\n\n  // if `true`, tell fill-range to regexify the string\n  if (typeof fn === 'boolean' && fn === true) {\n    opts.makeRe = true;\n  }\n\n  args.push(opts);\n  return fill.apply(null, args.concat(fn));\n};\n"]}