{"version":3,"sources":["../../../../../node_modules/babel-cli/lib/babel/file.js"],"names":["_stringify","require","_stringify2","_interopRequireDefault","_set","_set2","obj","__esModule","default","convertSourceMap","sourceMap","slash","path","util","fs","module","exports","commander","filenames","opts","sourceMaps","results","buildResult","map","SourceMapGenerator","file","basename","outFile","sourceRoot","code","offset","forEach","result","consumer","SourceMapConsumer","sources","eachMapping","mapping","source","add","addMapping","generated","line","generatedLine","column","generatedColumn","original","originalLine","originalColumn","content","sourceContentFor","setSourceContent","split","length","fromObject","toComment","output","mapLoc","addSourceMappingUrl","writeFileSync","process","stdout","write","stdin","setEncoding","on","chunk","read","push","transform","filename","sourceFileName","walk","_filenames","existsSync","stat","statSync","isDirectory","dirname","readdirFilter","join","shouldIgnore","sourceFilename","relative","data","compile","ignored","files","skipInitialBuild","watch","chokidar","requireChokidar","persistent","ignoreInitial","awaitWriteFinish","stabilityThreshold","pollInterval","type","canCompile","extensions","log","err","console","error","stack"],"mappings":"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","file":"file.js","sourcesContent":["\"use strict\";\n\nvar _stringify = require(\"babel-runtime/core-js/json/stringify\");\n\nvar _stringify2 = _interopRequireDefault(_stringify);\n\nvar _set = require(\"babel-runtime/core-js/set\");\n\nvar _set2 = _interopRequireDefault(_set);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar convertSourceMap = require(\"convert-source-map\");\nvar sourceMap = require(\"source-map\");\nvar slash = require(\"slash\");\nvar path = require(\"path\");\nvar util = require(\"./util\");\nvar fs = require(\"fs\");\n\nmodule.exports = function (commander, filenames, opts) {\n  if (commander.sourceMaps === \"inline\") {\n    opts.sourceMaps = true;\n  }\n\n  var results = [];\n\n  var buildResult = function buildResult() {\n    var map = new sourceMap.SourceMapGenerator({\n      file: path.basename(commander.outFile || \"\") || \"stdout\",\n      sourceRoot: opts.sourceRoot\n    });\n\n    var code = \"\";\n    var offset = 0;\n\n    results.forEach(function (result) {\n      code += result.code + \"\\n\";\n\n      if (result.map) {\n        var consumer = new sourceMap.SourceMapConsumer(result.map);\n        var sources = new _set2.default();\n\n        consumer.eachMapping(function (mapping) {\n          if (mapping.source != null) sources.add(mapping.source);\n\n          map.addMapping({\n            generated: {\n              line: mapping.generatedLine + offset,\n              column: mapping.generatedColumn\n            },\n            source: mapping.source,\n            original: mapping.source == null ? null : {\n              line: mapping.originalLine,\n              column: mapping.originalColumn\n            }\n          });\n        });\n\n        sources.forEach(function (source) {\n          var content = consumer.sourceContentFor(source, true);\n          if (content !== null) {\n            map.setSourceContent(source, content);\n          }\n        });\n\n        offset = code.split(\"\\n\").length - 1;\n      }\n    });\n\n    if (commander.sourceMaps === \"inline\" || !commander.outFile && commander.sourceMaps) {\n      code += \"\\n\" + convertSourceMap.fromObject(map).toComment();\n    }\n\n    return {\n      map: map,\n      code: code\n    };\n  };\n\n  var output = function output() {\n    var result = buildResult();\n\n    if (commander.outFile) {\n      if (commander.sourceMaps && commander.sourceMaps !== \"inline\") {\n        var mapLoc = commander.outFile + \".map\";\n        result.code = util.addSourceMappingUrl(result.code, mapLoc);\n        fs.writeFileSync(mapLoc, (0, _stringify2.default)(result.map));\n      }\n\n      fs.writeFileSync(commander.outFile, result.code);\n    } else {\n      process.stdout.write(result.code + \"\\n\");\n    }\n  };\n\n  var stdin = function stdin() {\n    var code = \"\";\n\n    process.stdin.setEncoding(\"utf8\");\n\n    process.stdin.on(\"readable\", function () {\n      var chunk = process.stdin.read();\n      if (chunk !== null) code += chunk;\n    });\n\n    process.stdin.on(\"end\", function () {\n      results.push(util.transform(commander.filename, code, {\n        sourceFileName: \"stdin\"\n      }));\n      output();\n    });\n  };\n\n  var walk = function walk() {\n    var _filenames = [];\n    results = [];\n\n    filenames.forEach(function (filename) {\n      if (!fs.existsSync(filename)) return;\n\n      var stat = fs.statSync(filename);\n      if (stat.isDirectory()) {\n        var dirname = filename;\n\n        util.readdirFilter(filename).forEach(function (filename) {\n          _filenames.push(path.join(dirname, filename));\n        });\n      } else {\n        _filenames.push(filename);\n      }\n    });\n\n    _filenames.forEach(function (filename) {\n      if (util.shouldIgnore(filename)) return;\n\n      var sourceFilename = filename;\n      if (commander.outFile) {\n        sourceFilename = path.relative(path.dirname(commander.outFile), sourceFilename);\n      }\n      sourceFilename = slash(sourceFilename);\n\n      var data = util.compile(filename, {\n        sourceFileName: sourceFilename\n      });\n\n      if (data.ignored) return;\n      results.push(data);\n    });\n\n    output();\n  };\n\n  var files = function files() {\n\n    if (!commander.skipInitialBuild) {\n      walk();\n    }\n\n    if (commander.watch) {\n      var chokidar = util.requireChokidar();\n      chokidar.watch(filenames, {\n        persistent: true,\n        ignoreInitial: true,\n        awaitWriteFinish: {\n          stabilityThreshold: 50,\n          pollInterval: 10\n        }\n      }).on(\"all\", function (type, filename) {\n        if (util.shouldIgnore(filename) || !util.canCompile(filename, commander.extensions)) return;\n\n        if (type === \"add\" || type === \"change\") {\n          util.log(type + \" \" + filename);\n          try {\n            walk();\n          } catch (err) {\n            console.error(err.stack);\n          }\n        }\n      });\n    }\n  };\n\n  if (filenames.length) {\n    files();\n  } else {\n    stdin();\n  }\n};"]}