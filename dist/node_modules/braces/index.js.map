{"version":3,"sources":["../../../node_modules/braces/index.js"],"names":["expand","require","repeat","tokens","module","exports","str","options","Error","braces","arr","Array","isArray","opts","nodupes","fn","es6","patternRe","RegExp","patternRegex","matches","match","m","escapeCommas","escapeDots","escapePaths","splitWhitespace","exponential","emptyBraces","escapeBraces","test","concat","before","es6Regex","braceRe","braceRegex","exec","outter","inner","segs","segsLength","indexOf","split","length","join","makeRe","replace","wrap","bash","len","i","val","path","splice","push","after","strict","filter","filterEmpty","esc","exp","res","parts","ele","idx","num","Math","pow","apply","ch","map","token","replacement","substr","cb","TypeError","slice"],"mappings":"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","file":"index.js","sourcesContent":["/*!\n * braces <https://github.com/jonschlinkert/braces>\n *\n * Copyright (c) 2014-2015, Jon Schlinkert.\n * Licensed under the MIT license.\n */\n\n'use strict';\n\n/**\n * Module dependencies\n */\n\nvar expand = require('expand-range');\nvar repeat = require('repeat-element');\nvar tokens = require('preserve');\n\n/**\n * Expose `braces`\n */\n\nmodule.exports = function(str, options) {\n  if (typeof str !== 'string') {\n    throw new Error('braces expects a string');\n  }\n  return braces(str, options);\n};\n\n/**\n * Expand `{foo,bar}` or `{1..5}` braces in the\n * given `string`.\n *\n * @param  {String} `str`\n * @param  {Array} `arr`\n * @param  {Object} `options`\n * @return {Array}\n */\n\nfunction braces(str, arr, options) {\n  if (str === '') {\n    return [];\n  }\n\n  if (!Array.isArray(arr)) {\n    options = arr;\n    arr = [];\n  }\n\n  var opts = options || {};\n  arr = arr || [];\n\n  if (typeof opts.nodupes === 'undefined') {\n    opts.nodupes = true;\n  }\n\n  var fn = opts.fn;\n  var es6;\n\n  if (typeof opts === 'function') {\n    fn = opts;\n    opts = {};\n  }\n\n  if (!(patternRe instanceof RegExp)) {\n    patternRe = patternRegex();\n  }\n\n  var matches = str.match(patternRe) || [];\n  var m = matches[0];\n\n  switch(m) {\n    case '\\\\,':\n      return escapeCommas(str, arr, opts);\n    case '\\\\.':\n      return escapeDots(str, arr, opts);\n    case '\\/.':\n      return escapePaths(str, arr, opts);\n    case ' ':\n      return splitWhitespace(str);\n    case '{,}':\n      return exponential(str, opts, braces);\n    case '{}':\n      return emptyBraces(str, arr, opts);\n    case '\\\\{':\n    case '\\\\}':\n      return escapeBraces(str, arr, opts);\n    case '${':\n      if (!/\\{[^{]+\\{/.test(str)) {\n        return arr.concat(str);\n      } else {\n        es6 = true;\n        str = tokens.before(str, es6Regex());\n      }\n  }\n\n  if (!(braceRe instanceof RegExp)) {\n    braceRe = braceRegex();\n  }\n\n  var match = braceRe.exec(str);\n  if (match == null) {\n    return [str];\n  }\n\n  var outter = match[1];\n  var inner = match[2];\n  if (inner === '') { return [str]; }\n\n  var segs, segsLength;\n\n  if (inner.indexOf('..') !== -1) {\n    segs = expand(inner, opts, fn) || inner.split(',');\n    segsLength = segs.length;\n\n  } else if (inner[0] === '\"' || inner[0] === '\\'') {\n    return arr.concat(str.split(/['\"]/).join(''));\n\n  } else {\n    segs = inner.split(',');\n    if (opts.makeRe) {\n      return braces(str.replace(outter, wrap(segs, '|')), opts);\n    }\n\n    segsLength = segs.length;\n    if (segsLength === 1 && opts.bash) {\n      segs[0] = wrap(segs[0], '\\\\');\n    }\n  }\n\n  var len = segs.length;\n  var i = 0, val;\n\n  while (len--) {\n    var path = segs[i++];\n\n    if (/(\\.[^.\\/])/.test(path)) {\n      if (segsLength > 1) {\n        return segs;\n      } else {\n        return [str];\n      }\n    }\n\n    val = splice(str, outter, path);\n\n    if (/\\{[^{}]+?\\}/.test(val)) {\n      arr = braces(val, arr, opts);\n    } else if (val !== '') {\n      if (opts.nodupes && arr.indexOf(val) !== -1) { continue; }\n      arr.push(es6 ? tokens.after(val) : val);\n    }\n  }\n\n  if (opts.strict) { return filter(arr, filterEmpty); }\n  return arr;\n}\n\n/**\n * Expand exponential ranges\n *\n *   `a{,}{,}` => ['a', 'a', 'a', 'a']\n */\n\nfunction exponential(str, options, fn) {\n  if (typeof options === 'function') {\n    fn = options;\n    options = null;\n  }\n\n  var opts = options || {};\n  var esc = '__ESC_EXP__';\n  var exp = 0;\n  var res;\n\n  var parts = str.split('{,}');\n  if (opts.nodupes) {\n    return fn(parts.join(''), opts);\n  }\n\n  exp = parts.length - 1;\n  res = fn(parts.join(esc), opts);\n  var len = res.length;\n  var arr = [];\n  var i = 0;\n\n  while (len--) {\n    var ele = res[i++];\n    var idx = ele.indexOf(esc);\n\n    if (idx === -1) {\n      arr.push(ele);\n\n    } else {\n      ele = ele.split('__ESC_EXP__').join('');\n      if (!!ele && opts.nodupes !== false) {\n        arr.push(ele);\n\n      } else {\n        var num = Math.pow(2, exp);\n        arr.push.apply(arr, repeat(ele, num));\n      }\n    }\n  }\n  return arr;\n}\n\n/**\n * Wrap a value with parens, brackets or braces,\n * based on the given character/separator.\n *\n * @param  {String|Array} `val`\n * @param  {String} `ch`\n * @return {String}\n */\n\nfunction wrap(val, ch) {\n  if (ch === '|') {\n    return '(' + val.join(ch) + ')';\n  }\n  if (ch === ',') {\n    return '{' + val.join(ch) + '}';\n  }\n  if (ch === '-') {\n    return '[' + val.join(ch) + ']';\n  }\n  if (ch === '\\\\') {\n    return '\\\\{' + val + '\\\\}';\n  }\n}\n\n/**\n * Handle empty braces: `{}`\n */\n\nfunction emptyBraces(str, arr, opts) {\n  return braces(str.split('{}').join('\\\\{\\\\}'), arr, opts);\n}\n\n/**\n * Filter out empty-ish values\n */\n\nfunction filterEmpty(ele) {\n  return !!ele && ele !== '\\\\';\n}\n\n/**\n * Handle patterns with whitespace\n */\n\nfunction splitWhitespace(str) {\n  var segs = str.split(' ');\n  var len = segs.length;\n  var res = [];\n  var i = 0;\n\n  while (len--) {\n    res.push.apply(res, braces(segs[i++]));\n  }\n  return res;\n}\n\n/**\n * Handle escaped braces: `\\\\{foo,bar}`\n */\n\nfunction escapeBraces(str, arr, opts) {\n  if (!/\\{[^{]+\\{/.test(str)) {\n    return arr.concat(str.split('\\\\').join(''));\n  } else {\n    str = str.split('\\\\{').join('__LT_BRACE__');\n    str = str.split('\\\\}').join('__RT_BRACE__');\n    return map(braces(str, arr, opts), function(ele) {\n      ele = ele.split('__LT_BRACE__').join('{');\n      return ele.split('__RT_BRACE__').join('}');\n    });\n  }\n}\n\n/**\n * Handle escaped dots: `{1\\\\.2}`\n */\n\nfunction escapeDots(str, arr, opts) {\n  if (!/[^\\\\]\\..+\\\\\\./.test(str)) {\n    return arr.concat(str.split('\\\\').join(''));\n  } else {\n    str = str.split('\\\\.').join('__ESC_DOT__');\n    return map(braces(str, arr, opts), function(ele) {\n      return ele.split('__ESC_DOT__').join('.');\n    });\n  }\n}\n\n/**\n * Handle escaped dots: `{1\\\\.2}`\n */\n\nfunction escapePaths(str, arr, opts) {\n  str = str.split('\\/.').join('__ESC_PATH__');\n  return map(braces(str, arr, opts), function(ele) {\n    return ele.split('__ESC_PATH__').join('\\/.');\n  });\n}\n\n/**\n * Handle escaped commas: `{a\\\\,b}`\n */\n\nfunction escapeCommas(str, arr, opts) {\n  if (!/\\w,/.test(str)) {\n    return arr.concat(str.split('\\\\').join(''));\n  } else {\n    str = str.split('\\\\,').join('__ESC_COMMA__');\n    return map(braces(str, arr, opts), function(ele) {\n      return ele.split('__ESC_COMMA__').join(',');\n    });\n  }\n}\n\n/**\n * Regex for common patterns\n */\n\nfunction patternRegex() {\n  return /\\${|( (?=[{,}])|(?=[{,}]) )|{}|{,}|\\\\,(?=.*[{}])|\\/\\.(?=.*[{}])|\\\\\\.(?={)|\\\\{|\\\\}/;\n}\n\n/**\n * Braces regex.\n */\n\nfunction braceRegex() {\n  return /.*(\\\\?\\{([^}]+)\\})/;\n}\n\n/**\n * es6 delimiter regex.\n */\n\nfunction es6Regex() {\n  return /\\$\\{([^}]+)\\}/;\n}\n\nvar braceRe;\nvar patternRe;\n\n/**\n * Faster alternative to `String.replace()` when the\n * index of the token to be replaces can't be supplied\n */\n\nfunction splice(str, token, replacement) {\n  var i = str.indexOf(token);\n  return str.substr(0, i) + replacement\n    + str.substr(i + token.length);\n}\n\n/**\n * Fast array map\n */\n\nfunction map(arr, fn) {\n  if (arr == null) {\n    return [];\n  }\n\n  var len = arr.length;\n  var res = new Array(len);\n  var i = -1;\n\n  while (++i < len) {\n    res[i] = fn(arr[i], i, arr);\n  }\n\n  return res;\n}\n\n/**\n * Fast array filter\n */\n\nfunction filter(arr, cb) {\n  if (arr == null) return [];\n  if (typeof cb !== 'function') {\n    throw new TypeError('braces: filter expects a callback function.');\n  }\n\n  var len = arr.length;\n  var res = arr.slice();\n  var i = 0;\n\n  while (len--) {\n    if (!cb(arr[len], i++)) {\n      res.splice(len, 1);\n    }\n  }\n  return res;\n}\n"]}